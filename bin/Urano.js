Urano = (function() {
  "use strict";

  /*
   * Generated by PEG.js 0.9.0.
   *
   * http://pegjs.org/
   */

  function peg$subclass(child, parent) {
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function peg$SyntaxError(message, expected, found, location) {
    this.message  = message;
    this.expected = expected;
    this.found    = found;
    this.location = location;
    this.name     = "SyntaxError";

    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, peg$SyntaxError);
    }
  }

  peg$subclass(peg$SyntaxError, Error);

  function peg$parse(input) {
    var options = arguments.length > 1 ? arguments[1] : {},
        parser  = this,

        peg$FAILED = {},

        peg$startRuleIndices = { Start: 0 },
        peg$startRuleIndex   = 0,

        peg$consts = [
          function(code) {
              return code;
            },
          function(body) {
              return {
                type: "Program",
                value: Urano.list.opt(body)
              };
            },
          function(x, xs) {
              return Urano.list.build(x, xs, 1);
            },
          function(body) {
              return body !== null ? body : [];
            },
          { type: "other", description: "statement" },
          { type: "other", description: "break stmt" },
          function(level) {
              return {
                type: "BreakStmt",
                level: level !== null ? level : 1
              };
            },
          { type: "other", description: "else statement" },
          function(body) {
              return {
                type: "ElseStmt",
                body: body
              };
            },
          { type: "other", description: "elsif statement" },
          function(expr, body) {
              return {
                type: "ElsifStmt",
                condition: expr,
                body: body
              };
            },
          { type: "other", description: "if statement" },
          function(expr, body, elsif) { return elsif; },
          function(expr, body, elsif, _else) { return _else; },
          function(expr, body, elsif, _else) {

              return {
                type: "IfStmt",
                condition: expr,
                then: body,
                elsif: Urano.list.opt(elsif),
                else: _else
              };
            },
          { type: "other", description: "import statement" },
          function(x, xs) {
              return {
                type: "ImportStmt",
                import: [x].concat(xs)
              };
            },
          { type: "other", description: "loop statement" },
          function(body) {
              return {
                type: "LoopStmt",
                body: body
              };
            },
          { type: "other", description: "return statement" },
          function(expr) { return expr },
          function(expr) {
              return {
                type: "ReturnStmt",
                expr: expr
              }
            },
          { type: "other", description: "while statement" },
          function(expr, body, _else) { return _else; },
          function(expr, body, _else) {
              return {
                type: "WhileStmt",
                condition: expr,
                body: body,
                else: _else
              };
            },
          { type: "other", description: "expression" },
          "expr",
          { type: "literal", value: "expr", description: "\"expr\"" },
          function() {
              return ["MAYBE EXPRESSION"];
            },
          function(i) {
              return {
                type: "Expr",
                value: i
              }
            },
          { type: "other", description: "reserved word" },
          { type: "other", description: "alias" },
          "alias",
          { type: "literal", value: "alias", description: "\"alias\"" },
          { type: "other", description: "and" },
          "and",
          { type: "literal", value: "and", description: "\"and\"" },
          { type: "other", description: "bool" },
          "bool",
          { type: "literal", value: "bool", description: "\"bool\"" },
          { type: "other", description: "break" },
          "break",
          { type: "literal", value: "break", description: "\"break\"" },
          { type: "other", description: "class" },
          "class",
          { type: "literal", value: "class", description: "\"class\"" },
          { type: "other", description: "declare" },
          "declare",
          { type: "literal", value: "declare", description: "\"declare\"" },
          { type: "other", description: "else" },
          "else",
          { type: "literal", value: "else", description: "\"else\"" },
          { type: "other", description: "elsif" },
          "elsif",
          { type: "literal", value: "elsif", description: "\"elsif\"" },
          { type: "other", description: "false" },
          "false",
          { type: "literal", value: "false", description: "\"false\"" },
          { type: "other", description: "finally" },
          "finally",
          { type: "literal", value: "finally", description: "\"finally\"" },
          { type: "other", description: "for" },
          "for",
          { type: "literal", value: "for", description: "\"for\"" },
          { type: "other", description: "func" },
          "func",
          { type: "literal", value: "func", description: "\"func\"" },
          { type: "other", description: "if" },
          "if",
          { type: "literal", value: "if", description: "\"if\"" },
          { type: "other", description: "import" },
          "import",
          { type: "literal", value: "import", description: "\"import\"" },
          { type: "other", description: "in" },
          "in",
          { type: "literal", value: "in", description: "\"in\"" },
          { type: "other", description: "iterate" },
          "iterate",
          { type: "literal", value: "iterate", description: "\"iterate\"" },
          { type: "other", description: "let" },
          "let",
          { type: "literal", value: "let", description: "\"let\"" },
          { type: "other", description: "loop" },
          "loop",
          { type: "literal", value: "loop", description: "\"loop\"" },
          { type: "other", description: "match" },
          "match",
          { type: "literal", value: "match", description: "\"match\"" },
          { type: "other", description: "mixed" },
          "mixed",
          { type: "literal", value: "mixed", description: "\"mixed\"" },
          { type: "other", description: "module" },
          "module",
          { type: "literal", value: "module", description: "\"module\"" },
          { type: "other", description: "nil" },
          "nil",
          { type: "literal", value: "nil", description: "\"nil\"" },
          { type: "other", description: "number" },
          "number",
          { type: "literal", value: "number", description: "\"number\"" },
          { type: "other", description: "object" },
          "object",
          { type: "literal", value: "object", description: "\"object\"" },
          { type: "other", description: "or" },
          "or",
          { type: "literal", value: "or", description: "\"or\"" },
          { type: "other", description: "otherwise" },
          "otherwise",
          { type: "literal", value: "otherwise", description: "\"otherwise\"" },
          { type: "other", description: "protocol" },
          "protocol",
          { type: "literal", value: "protocol", description: "\"protocol\"" },
          { type: "other", description: "raise" },
          "raise",
          { type: "literal", value: "raise", description: "\"raise\"" },
          { type: "other", description: "rescue" },
          "rescue",
          { type: "literal", value: "rescue", description: "\"rescue\"" },
          { type: "other", description: "resource" },
          "resource",
          { type: "literal", value: "resource", description: "\"resource\"" },
          { type: "other", description: "return" },
          "return",
          { type: "literal", value: "return", description: "\"return\"" },
          { type: "other", description: "static" },
          "static",
          { type: "literal", value: "static", description: "\"static\"" },
          { type: "other", description: "string" },
          "string",
          { type: "literal", value: "string", description: "\"string\"" },
          { type: "other", description: "true" },
          "true",
          { type: "literal", value: "true", description: "\"true\"" },
          { type: "other", description: "try" },
          "try",
          { type: "literal", value: "try", description: "\"try\"" },
          { type: "other", description: "while" },
          "while",
          { type: "literal", value: "while", description: "\"while\"" },
          { type: "other", description: "xor" },
          "xor",
          { type: "literal", value: "xor", description: "\"xor\"" },
          { type: "other", description: "yield" },
          "yield",
          { type: "literal", value: "yield", description: "\"yield\"" },
          { type: "other", description: "plus operator" },
          "+",
          { type: "literal", value: "+", description: "\"+\"" },
          { type: "other", description: "minus operator" },
          "-",
          { type: "literal", value: "-", description: "\"-\"" },
          { type: "other", description: "decimal" },
          /^[1-9]/,
          { type: "class", value: "[1-9]", description: "[1-9]" },
          /^[0-9]/,
          { type: "class", value: "[0-9]", description: "[0-9]" },
          function(x, xs) {
              return parseInt([x].concat(xs).join(""));
            },
          "0",
          { type: "literal", value: "0", description: "\"0\"" },
          /^[xX]/,
          { type: "class", value: "[xX]", description: "[xX]" },
          function() {
              return 0;
            },
          { type: "other", description: "hexadecimal" },
          /^[0-9a-fA-F]/,
          { type: "class", value: "[0-9a-fA-F]", description: "[0-9a-fA-F]" },
          function(hexa) {
              return parseInt("0x" + hexa.join(""));
            },
          { type: "other", description: "octal" },
          /^[0-7]/,
          { type: "class", value: "[0-7]", description: "[0-7]" },
          function(octal) {
              return parseInt("0" + octal.join(""), 8);
            },
          { type: "other", description: "integer" },
          function(op, t) {
              // TODO: +- on operators
              return op === null
                ? t
                : op === "+"
                  ? +(t)
                  : -(t);
            },
          { type: "other", description: "identifier" },
          function(name) {
              return name;
            },
          function(x, xs) {
              return {
                type: "Identifier",
                value: [x].concat(xs).join("")
              };
            },
          /^[a-zA-Z_-\xFF]/,
          { type: "class", value: "[a-zA-Z_\\x7f-\\xff]", description: "[a-zA-Z_\\x7f-\\xff]" },
          /^[a-zA-Z0-9_-\xFF]/,
          { type: "class", value: "[a-zA-Z0-9_\\x7f-\\xff]", description: "[a-zA-Z0-9_\\x7f-\\xff]" },
          { type: "other", description: "import identifier" },
          ".",
          { type: "literal", value: ".", description: "\".\"" },
          function(x, i) { return i.value; },
          function(x, xs) {
              return {
                type: "ImportIdentifier",
                file: [x.value].concat(xs)
              };
            },
          ",",
          { type: "literal", value: ",", description: "\",\"" },
          function(i) {
              return i;
            },
          { type: "other", description: "left bracket" },
          "{",
          { type: "literal", value: "{", description: "\"{\"" },
          { type: "other", description: "right bracket" },
          "}",
          { type: "literal", value: "}", description: "\"}\"" },
          { type: "other", description: "left square bracket" },
          "[",
          { type: "literal", value: "[", description: "\"[\"" },
          { type: "other", description: "right square bracket" },
          "]",
          { type: "literal", value: "]", description: "\"]\"" },
          { type: "other", description: "optional whitespace" },
          /^[ \t]/,
          { type: "class", value: "[ \\t]", description: "[ \\t]" },
          { type: "other", description: "mandatory whitespace" },
          { type: "other", description: "optional newline" },
          /^[\r\n]/,
          { type: "class", value: "[\\r\\n]", description: "[\\r\\n]" },
          { type: "other", description: "mandatory newline" },
          { type: "other", description: "optional newline or whitespace" },
          { type: "other", description: "mandatory newline or whitespace" }
        ],

        peg$bytecode = [
          peg$decode("%;i/1#;!/($8\": \"! )(\"'#&'#"),
          peg$decode("%;\".\" &\"/' 8!:!!! )"),
          peg$decode("%;$/h#$%;i/,#;$/#$+\")(\"'#&'#06*%;i/,#;$/#$+\")(\"'#&'#&/2$;i/)$8#:\"#\"\"!)(#'#(\"'#&'#"),
          peg$decode("%;\".\" &\"/' 8!:#!! )"),
          peg$decode("<;%.A &;(.; &;).5 &;*./ &;+.) &;,.# &;-=.\" 7$"),
          peg$decode("<%;2/?#;f/6$;Z.\" &\"/($8#:&#! )(#'#(\"'#&'#=.\" 7%"),
          peg$decode("<%;5/^#;f/U$;a/L$;i/C$;#/:$;i/1$;b/($8':('!\")(''#(&'#(%'#($'#(#'#(\"'#&'#=.\" 7'"),
          peg$decode("<%;6/q#;f/h$;-/_$;f/V$;a/M$;i/D$;#/;$;i/2$;b/)$8):*)\"&\")()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#=.\" 7)"),
          peg$decode("<%;;/\xE0#;f/\xD7$;-/\xCE$;f/\xC5$;a/\xBC$;i/\xB3$;#/\xAA$;i/\xA1$;b/\x98$$%;i/3#;'/*$8\":,\"#*& )(\"'#&'#0=*%;i/3#;'/*$8\":,\"#*& )(\"'#&'#&/T$%;i/4#;&/+$8\":-\"$*&# )(\"'#&'#.\" &\"/+$8+:.+$($! )(+'#(*'#()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#=.\" 7+"),
          peg$decode("<%;</K#;f/B$;_/9$$;`0#*;`&/)$8$:0$\"! )($'#(#'#(\"'#&'#=.\" 7/"),
          peg$decode("<%;@/^#;f/U$;a/L$;i/C$;#/:$;i/1$;b/($8':2'!\")(''#(&'#(%'#($'#(#'#(\"'#&'#=.\" 71"),
          peg$decode("<%;M/N#%;f/1#;-/($8\":4\"! )(\"'#&'#.\" &\"/($8\":5\"! )(\"'#&'#=.\" 73"),
          peg$decode("<%;R/\x9A#;f/\x91$;-/\x88$;f/$;a/v$;i/m$;#/d$;i/[$;b/R$%;i/3#;&/*$8\":7\"#)% )(\"'#&'#.\" &\"/*$8*:8*#'# )(*'#()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#=.\" 76"),
          peg$decode("<%2:\"\"6:7;/<#%<;^=.##&&!&'#/'$8\":<\" )(\"'#&'#./ &%;Z/' 8!:=!! )=.\" 79"),
          peg$decode("<;/.\xFB &;0.\xF5 &;1.\xEF &;2.\xE9 &;3.\xE3 &;4.\xDD &;5.\xD7 &;6.\xD1 &;7.\xCB &;8.\xC5 &;9.\xBF &;:.\xB9 &;;.\xB3 &;<.\xAD &;=.\xA7 &;>.\xA1 &;?.\x9B &;@.\x95 &;A.\x8F &;B.\x89 &;C.\x83 &;D.} &;E.w &;F.q &;G.k &;H.e &;I._ &;J.Y &;K.S &;L.M &;M.G &;N.A &;O.; &;P.5 &;Q./ &;R.) &;S.# &;T=.\" 7>"),
          peg$decode("<%2@\"\"6@7A/8#%<;^=.##&&!&'#/#$+\")(\"'#&'#=.\" 7?"),
          peg$decode("<%2C\"\"6C7D/8#%<;^=.##&&!&'#/#$+\")(\"'#&'#=.\" 7B"),
          peg$decode("<%2F\"\"6F7G/8#%<;^=.##&&!&'#/#$+\")(\"'#&'#=.\" 7E"),
          peg$decode("<%2I\"\"6I7J/8#%<;^=.##&&!&'#/#$+\")(\"'#&'#=.\" 7H"),
          peg$decode("<%2L\"\"6L7M/8#%<;^=.##&&!&'#/#$+\")(\"'#&'#=.\" 7K"),
          peg$decode("<%2O\"\"6O7P/8#%<;^=.##&&!&'#/#$+\")(\"'#&'#=.\" 7N"),
          peg$decode("<%2R\"\"6R7S/8#%<;^=.##&&!&'#/#$+\")(\"'#&'#=.\" 7Q"),
          peg$decode("<%2U\"\"6U7V/8#%<;^=.##&&!&'#/#$+\")(\"'#&'#=.\" 7T"),
          peg$decode("<%2X\"\"6X7Y/8#%<;^=.##&&!&'#/#$+\")(\"'#&'#=.\" 7W"),
          peg$decode("<%2[\"\"6[7\\/8#%<;^=.##&&!&'#/#$+\")(\"'#&'#=.\" 7Z"),
          peg$decode("<%2^\"\"6^7_/8#%<;^=.##&&!&'#/#$+\")(\"'#&'#=.\" 7]"),
          peg$decode("<%2a\"\"6a7b/8#%<;^=.##&&!&'#/#$+\")(\"'#&'#=.\" 7`"),
          peg$decode("<%2d\"\"6d7e/8#%<;^=.##&&!&'#/#$+\")(\"'#&'#=.\" 7c"),
          peg$decode("<%2g\"\"6g7h/8#%<;^=.##&&!&'#/#$+\")(\"'#&'#=.\" 7f"),
          peg$decode("<%2j\"\"6j7k/8#%<;^=.##&&!&'#/#$+\")(\"'#&'#=.\" 7i"),
          peg$decode("<%2m\"\"6m7n/8#%<;^=.##&&!&'#/#$+\")(\"'#&'#=.\" 7l"),
          peg$decode("<%2p\"\"6p7q/8#%<;^=.##&&!&'#/#$+\")(\"'#&'#=.\" 7o"),
          peg$decode("<%2s\"\"6s7t/8#%<;^=.##&&!&'#/#$+\")(\"'#&'#=.\" 7r"),
          peg$decode("<%2v\"\"6v7w/8#%<;^=.##&&!&'#/#$+\")(\"'#&'#=.\" 7u"),
          peg$decode("<%2y\"\"6y7z/8#%<;^=.##&&!&'#/#$+\")(\"'#&'#=.\" 7x"),
          peg$decode("<%2|\"\"6|7}/8#%<;^=.##&&!&'#/#$+\")(\"'#&'#=.\" 7{"),
          peg$decode("<%2\"\"67\x80/8#%<;^=.##&&!&'#/#$+\")(\"'#&'#=.\" 7~"),
          peg$decode("<%2\x82\"\"6\x827\x83/8#%<;^=.##&&!&'#/#$+\")(\"'#&'#=.\" 7\x81"),
          peg$decode("<%2\x85\"\"6\x857\x86/8#%<;^=.##&&!&'#/#$+\")(\"'#&'#=.\" 7\x84"),
          peg$decode("<%2\x88\"\"6\x887\x89/8#%<;^=.##&&!&'#/#$+\")(\"'#&'#=.\" 7\x87"),
          peg$decode("<%2\x8B\"\"6\x8B7\x8C/8#%<;^=.##&&!&'#/#$+\")(\"'#&'#=.\" 7\x8A"),
          peg$decode("<%2\x8E\"\"6\x8E7\x8F/8#%<;^=.##&&!&'#/#$+\")(\"'#&'#=.\" 7\x8D"),
          peg$decode("<%2\x91\"\"6\x917\x92/8#%<;^=.##&&!&'#/#$+\")(\"'#&'#=.\" 7\x90"),
          peg$decode("<%2\x94\"\"6\x947\x95/8#%<;^=.##&&!&'#/#$+\")(\"'#&'#=.\" 7\x93"),
          peg$decode("<%2\x97\"\"6\x977\x98/8#%<;^=.##&&!&'#/#$+\")(\"'#&'#=.\" 7\x96"),
          peg$decode("<%2\x9A\"\"6\x9A7\x9B/8#%<;^=.##&&!&'#/#$+\")(\"'#&'#=.\" 7\x99"),
          peg$decode("<%2\x9D\"\"6\x9D7\x9E/8#%<;^=.##&&!&'#/#$+\")(\"'#&'#=.\" 7\x9C"),
          peg$decode("<%2\xA0\"\"6\xA07\xA1/8#%<;^=.##&&!&'#/#$+\")(\"'#&'#=.\" 7\x9F"),
          peg$decode("<%2\xA3\"\"6\xA37\xA4/8#%<;^=.##&&!&'#/#$+\")(\"'#&'#=.\" 7\xA2"),
          peg$decode("<%2\xA6\"\"6\xA67\xA7/8#%<;^=.##&&!&'#/#$+\")(\"'#&'#=.\" 7\xA5"),
          peg$decode("<%2\xA9\"\"6\xA97\xAA/8#%<;^=.##&&!&'#/#$+\")(\"'#&'#=.\" 7\xA8"),
          peg$decode("<%2\xAC\"\"6\xAC7\xAD/8#%<;^=.##&&!&'#/#$+\")(\"'#&'#=.\" 7\xAB"),
          peg$decode("<%2\xAF\"\"6\xAF7\xB0/8#%<;^=.##&&!&'#/#$+\")(\"'#&'#=.\" 7\xAE"),
          peg$decode("<2\xB2\"\"6\xB27\xB3=.\" 7\xB1"),
          peg$decode("<2\xB5\"\"6\xB57\xB6=.\" 7\xB4"),
          peg$decode("<%4\xB8\"\"5!7\xB9/E#$4\xBA\"\"5!7\xBB0)*4\xBA\"\"5!7\xBB&/)$8\":\xBC\"\"! )(\"'#&'#.R &%2\xBD\"\"6\xBD7\xBE/B#%<4\xBF\"\"5!7\xC0=.##&&!&'#/'$8\":\xC1\" )(\"'#&'#=.\" 7\xB7"),
          peg$decode("<%2\xBD\"\"6\xBD7\xBE/Y#4\xBF\"\"5!7\xC0/J$$4\xC3\"\"5!7\xC4/,#0)*4\xC3\"\"5!7\xC4&&&#/($8#:\xC5#! )(#'#(\"'#&'#=.\" 7\xC2"),
          peg$decode("<%2\xBD\"\"6\xBD7\xBE/J#$4\xC7\"\"5!7\xC8/,#0)*4\xC7\"\"5!7\xC8&&&#/($8\":\xC9\"! )(\"'#&'#=.\" 7\xC6"),
          peg$decode("<%;U.# &;V.\" &\"/>#;Y.) &;X.# &;W/)$8\":\xCB\"\"! )(\"'#&'#=.\" 7\xCA"),
          peg$decode("<%%<;.=.##&&!&'#/1#;\\/($8\":\xCD\"! )(\"'#&'#=.\" 7\xCC"),
          peg$decode("%;]/9#$;^0#*;^&/)$8\":\xCE\"\"! )(\"'#&'#"),
          peg$decode("4\xCF\"\"5!7\xD0"),
          peg$decode("4\xD1\"\"5!7\xD2"),
          peg$decode("<%;[/w#$%2\xD4\"\"6\xD47\xD5/2#;[/)$8\":\xD6\"\"$ )(\"'#&'#0B*%2\xD4\"\"6\xD47\xD5/2#;[/)$8\":\xD6\"\"$ )(\"'#&'#&/)$8\":\xD7\"\"! )(\"'#&'#=.\" 7\xD3"),
          peg$decode("%;e/I#2\xD8\"\"6\xD87\xD9/:$;e/1$;_/($8$:\xDA$! )($'#(#'#(\"'#&'#"),
          peg$decode("<2\xDC\"\"6\xDC7\xDD=.\" 7\xDB"),
          peg$decode("<2\xDF\"\"6\xDF7\xE0=.\" 7\xDE"),
          peg$decode("<2\xE2\"\"6\xE27\xE3=.\" 7\xE1"),
          peg$decode("<2\xE5\"\"6\xE57\xE6=.\" 7\xE4"),
          peg$decode("<$4\xE8\"\"5!7\xE90)*4\xE8\"\"5!7\xE9&=.\" 7\xE7"),
          peg$decode("<$4\xE8\"\"5!7\xE9/,#0)*4\xE8\"\"5!7\xE9&&&#=.\" 7\xEA"),
          peg$decode("<$4\xEC\"\"5!7\xED0)*4\xEC\"\"5!7\xED&=.\" 7\xEB"),
          peg$decode("<$4\xEC\"\"5!7\xED/,#0)*4\xEC\"\"5!7\xED&&&#=.\" 7\xEE"),
          peg$decode("<$4\xE8\"\"5!7\xE9.) &4\xEC\"\"5!7\xED05*4\xE8\"\"5!7\xE9.) &4\xEC\"\"5!7\xED&=.\" 7\xEF"),
          peg$decode("<;f.# &;h=.\" 7\xF0")
        ],

        peg$currPos          = 0,
        peg$savedPos         = 0,
        peg$posDetailsCache  = [{ line: 1, column: 1, seenCR: false }],
        peg$maxFailPos       = 0,
        peg$maxFailExpected  = [],
        peg$silentFails      = 0,

        peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleIndices)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleIndex = peg$startRuleIndices[options.startRule];
    }

    function text() {
      return input.substring(peg$savedPos, peg$currPos);
    }

    function location() {
      return peg$computeLocation(peg$savedPos, peg$currPos);
    }

    function expected(description) {
      throw peg$buildException(
        null,
        [{ type: "other", description: description }],
        input.substring(peg$savedPos, peg$currPos),
        peg$computeLocation(peg$savedPos, peg$currPos)
      );
    }

    function error(message) {
      throw peg$buildException(
        message,
        null,
        input.substring(peg$savedPos, peg$currPos),
        peg$computeLocation(peg$savedPos, peg$currPos)
      );
    }

    function peg$computePosDetails(pos) {
      var details = peg$posDetailsCache[pos],
          p, ch;

      if (details) {
        return details;
      } else {
        p = pos - 1;
        while (!peg$posDetailsCache[p]) {
          p--;
        }

        details = peg$posDetailsCache[p];
        details = {
          line:   details.line,
          column: details.column,
          seenCR: details.seenCR
        };

        while (p < pos) {
          ch = input.charAt(p);
          if (ch === "\n") {
            if (!details.seenCR) { details.line++; }
            details.column = 1;
            details.seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            details.line++;
            details.column = 1;
            details.seenCR = true;
          } else {
            details.column++;
            details.seenCR = false;
          }

          p++;
        }

        peg$posDetailsCache[pos] = details;
        return details;
      }
    }

    function peg$computeLocation(startPos, endPos) {
      var startPosDetails = peg$computePosDetails(startPos),
          endPosDetails   = peg$computePosDetails(endPos);

      return {
        start: {
          offset: startPos,
          line:   startPosDetails.line,
          column: startPosDetails.column
        },
        end: {
          offset: endPos,
          line:   endPosDetails.line,
          column: endPosDetails.column
        }
      };
    }

    function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) { return; }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      }

      peg$maxFailExpected.push(expected);
    }

    function peg$buildException(message, expected, found, location) {
      function cleanupExpected(expected) {
        var i = 1;

        expected.sort(function(a, b) {
          if (a.description < b.description) {
            return -1;
          } else if (a.description > b.description) {
            return 1;
          } else {
            return 0;
          }
        });

        while (i < expected.length) {
          if (expected[i - 1] === expected[i]) {
            expected.splice(i, 1);
          } else {
            i++;
          }
        }
      }

      function buildMessage(expected, found) {
        function stringEscape(s) {
          function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }

          return s
            .replace(/\\/g,   '\\\\')
            .replace(/"/g,    '\\"')
            .replace(/\x08/g, '\\b')
            .replace(/\t/g,   '\\t')
            .replace(/\n/g,   '\\n')
            .replace(/\f/g,   '\\f')
            .replace(/\r/g,   '\\r')
            .replace(/[\x00-\x07\x0B\x0E\x0F]/g, function(ch) { return '\\x0' + hex(ch); })
            .replace(/[\x10-\x1F\x80-\xFF]/g,    function(ch) { return '\\x'  + hex(ch); })
            .replace(/[\u0100-\u0FFF]/g,         function(ch) { return '\\u0' + hex(ch); })
            .replace(/[\u1000-\uFFFF]/g,         function(ch) { return '\\u'  + hex(ch); });
        }

        var expectedDescs = new Array(expected.length),
            expectedDesc, foundDesc, i;

        for (i = 0; i < expected.length; i++) {
          expectedDescs[i] = expected[i].description;
        }

        expectedDesc = expected.length > 1
          ? expectedDescs.slice(0, -1).join(", ")
              + " or "
              + expectedDescs[expected.length - 1]
          : expectedDescs[0];

        foundDesc = found ? "\"" + stringEscape(found) + "\"" : "end of input";

        return "Expected " + expectedDesc + " but " + foundDesc + " found.";
      }

      if (expected !== null) {
        cleanupExpected(expected);
      }

      return new peg$SyntaxError(
        message !== null ? message : buildMessage(expected, found),
        expected,
        found,
        location
      );
    }

    function peg$decode(s) {
      var bc = new Array(s.length), i;

      for (i = 0; i < s.length; i++) {
        bc[i] = s.charCodeAt(i) - 32;
      }

      return bc;
    }

    function peg$parseRule(index) {
      var bc    = peg$bytecode[index],
          ip    = 0,
          ips   = [],
          end   = bc.length,
          ends  = [],
          stack = [],
          params, i;

      while (true) {
        while (ip < end) {
          switch (bc[ip]) {
            case 0:
              stack.push(peg$consts[bc[ip + 1]]);
              ip += 2;
              break;

            case 1:
              stack.push(void 0);
              ip++;
              break;

            case 2:
              stack.push(null);
              ip++;
              break;

            case 3:
              stack.push(peg$FAILED);
              ip++;
              break;

            case 4:
              stack.push([]);
              ip++;
              break;

            case 5:
              stack.push(peg$currPos);
              ip++;
              break;

            case 6:
              stack.pop();
              ip++;
              break;

            case 7:
              peg$currPos = stack.pop();
              ip++;
              break;

            case 8:
              stack.length -= bc[ip + 1];
              ip += 2;
              break;

            case 9:
              stack.splice(-2, 1);
              ip++;
              break;

            case 10:
              stack[stack.length - 2].push(stack.pop());
              ip++;
              break;

            case 11:
              stack.push(stack.splice(stack.length - bc[ip + 1], bc[ip + 1]));
              ip += 2;
              break;

            case 12:
              stack.push(input.substring(stack.pop(), peg$currPos));
              ip++;
              break;

            case 13:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (stack[stack.length - 1]) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 14:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (stack[stack.length - 1] === peg$FAILED) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 15:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (stack[stack.length - 1] !== peg$FAILED) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 16:
              if (stack[stack.length - 1] !== peg$FAILED) {
                ends.push(end);
                ips.push(ip);

                end = ip + 2 + bc[ip + 1];
                ip += 2;
              } else {
                ip += 2 + bc[ip + 1];
              }

              break;

            case 17:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (input.length > peg$currPos) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 18:
              ends.push(end);
              ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

              if (input.substr(peg$currPos, peg$consts[bc[ip + 1]].length) === peg$consts[bc[ip + 1]]) {
                end = ip + 4 + bc[ip + 2];
                ip += 4;
              } else {
                end = ip + 4 + bc[ip + 2] + bc[ip + 3];
                ip += 4 + bc[ip + 2];
              }

              break;

            case 19:
              ends.push(end);
              ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

              if (input.substr(peg$currPos, peg$consts[bc[ip + 1]].length).toLowerCase() === peg$consts[bc[ip + 1]]) {
                end = ip + 4 + bc[ip + 2];
                ip += 4;
              } else {
                end = ip + 4 + bc[ip + 2] + bc[ip + 3];
                ip += 4 + bc[ip + 2];
              }

              break;

            case 20:
              ends.push(end);
              ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

              if (peg$consts[bc[ip + 1]].test(input.charAt(peg$currPos))) {
                end = ip + 4 + bc[ip + 2];
                ip += 4;
              } else {
                end = ip + 4 + bc[ip + 2] + bc[ip + 3];
                ip += 4 + bc[ip + 2];
              }

              break;

            case 21:
              stack.push(input.substr(peg$currPos, bc[ip + 1]));
              peg$currPos += bc[ip + 1];
              ip += 2;
              break;

            case 22:
              stack.push(peg$consts[bc[ip + 1]]);
              peg$currPos += peg$consts[bc[ip + 1]].length;
              ip += 2;
              break;

            case 23:
              stack.push(peg$FAILED);
              if (peg$silentFails === 0) {
                peg$fail(peg$consts[bc[ip + 1]]);
              }
              ip += 2;
              break;

            case 24:
              peg$savedPos = stack[stack.length - 1 - bc[ip + 1]];
              ip += 2;
              break;

            case 25:
              peg$savedPos = peg$currPos;
              ip++;
              break;

            case 26:
              params = bc.slice(ip + 4, ip + 4 + bc[ip + 3]);
              for (i = 0; i < bc[ip + 3]; i++) {
                params[i] = stack[stack.length - 1 - params[i]];
              }

              stack.splice(
                stack.length - bc[ip + 2],
                bc[ip + 2],
                peg$consts[bc[ip + 1]].apply(null, params)
              );

              ip += 4 + bc[ip + 3];
              break;

            case 27:
              stack.push(peg$parseRule(bc[ip + 1]));
              ip += 2;
              break;

            case 28:
              peg$silentFails++;
              ip++;
              break;

            case 29:
              peg$silentFails--;
              ip++;
              break;

            default:
              throw new Error("Invalid opcode: " + bc[ip] + ".");
          }
        }

        if (ends.length > 0) {
          end = ends.pop();
          ip = ips.pop();
        } else {
          break;
        }
      }

      return stack[0];
    }


      var Urano = {
        list: {
          build: function(x, xs, n) {
            return [x].concat(Urano.list.take(xs, n));
          },
          take: function(xs, n) {
            var result = new Array(xs.length);

            for (var i = 0, len = xs.length; i < len; i++) {
              result[i] = xs[i][n];
            }

            return result;
          },
          opt: function(value) {
            return value !== null ? value : [];
          }
        }
      };


    peg$result = peg$parseRule(peg$startRuleIndex);

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
      return peg$result;
    } else {
      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
        peg$fail({ type: "end", description: "end of input" });
      }

      throw peg$buildException(
        null,
        peg$maxFailExpected,
        peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
        peg$maxFailPos < input.length
          ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
          : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
      );
    }
  }

  return {
    SyntaxError: peg$SyntaxError,
    parse:       peg$parse
  };
})();
