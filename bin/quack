<?php namespace _0\_1{ class _2{private static $messages=null;public static function message($key,$arguments){if(null ===static::$messages){static::$messages=['SCO010' =>'Duplicated parameter `%s\' in anonymous function','SCO020' =>'Use of undefined variable `%s\'','SCO030' =>'===DELETED===','SCO040' =>'===DELETED===','SCO050' =>'Duplicated object property `%s\'','SCO060' =>'Duplicated parameter `%s\' in function `%s\'','SCO070' =>'Symbol `%s\' is not a variable','SCO080' =>'Symbol `%s\' is immutable','SCO090' =>'Invalid left-hand side in assignment','SCO100' =>'Array destructuring expects all children to be names','SCO110' =>'===DELETED===','SCO120' =>'Duplicated declaration of `%s\' on where clause','SCO130' =>'Symbol `%s\' declared twice','SCO140' =>'Called %s outside a loop','SCO150' =>'Called %s with undefined label `%s\'','SCO160' =>'Called %s with invalid label `%s\'','SCO170' =>'Duplicated declaration of `%s\' for enum `%s\'','SCO180' =>'Same variable name `%s\' for key and value on foreach','SCO190' =>'%s `%s\' not found in implementation','SCO200' =>'`%s\' is not a class in implementation','SCO210' =>'===DELETED===','SCO220' =>'===DELETED===','TYP010' =>'Value passed to while loop should be a `boolean\', not a `%s\'','TYP020' =>'Cannot add element of type `%s\' to array of `%s\'','TYP030' =>'The type of post conditional statement should be a `boolean\', not a `%s\'','TYP040' =>'Expected index of array to be a number. Got `%s\'','TYP050' =>'Expected index of map to be a `%s\'. Got `%s\'','TYP060' =>'Trying to access by index an element of type `%s\' that is not accessible','TYP070' =>'Key on index %d of map expected to be `%s\'. Got `%s\'','TYP080' =>'Value on index %s of map expected to be `%s\'. Got `%s\'','TYP090' =>'Expression of type `%s\' has no property `%s\'','TYP100' =>'Trying to set value of type `%s` to %s','TYP110' =>'No type overload found for operator `%s\' at {%s %s %s}','TYP120' =>'===DELETED===','TYP130' =>'Why in the world are you trying to compare two expressions of different types? at {%s %s %s}','TYP140' =>'Value passed to if statement should a `boolean\', not a `%s\'','TYP150' =>'Expecting type of case of switch statement to be `%s\'. Got `%s\'','TYP160' =>'More than one else clause for switch statement','TYP170' =>'Expecting type of field `%s\' of foreach statement to be a `number\'. Got `%s\'','TYP180' =>'Condition passed to elif statement should be a `boolean\', not a `%s\'','TYP190' =>'Cannot infer type of non-variable `%s\'','TYP200' =>'Expected condition %d of when expression to be a `boolean\'. Got `%s\'','TYP210' =>'All results to when expression must be of same type `%s\', but result %d is `%s\'','TYP220' =>'Expected a `number\' on operand `%s\' of range expression. Got `%s\'','TYP230' =>'No type overload for operator `%s\' on type `%s\'','TYP240' =>'Condition of ternary operator should de `boolean\'. Got `%s\'','TYP250' =>'Both sides of ternary expression must have the same type. Got `%s\' and `%s\'','TYP260' =>'`%s\' is not iterable','TYP270' =>'You forgot to set a value for immutable variable `%s\', my love','TYP280' =>'===DELETED===','TYP290' =>'Caught declaration of free variable `%s\'','TYP300' =>'Cannot assign to variable `%s\' of type `%s\' a value of type `%s\'','TYP310' =>'I\'m sorry, but type `%s\' is not callable','TYP320' =>'Function of type `%s\' expected %d arguments, but received %d','TYP330' =>'Argument number %d of call expected to be a `%s\', but it is a `%s\'','TYP340' =>'On map, cannot match the type of %s `%s\' with `%s\'','TYP350' =>'Bad equation: `%s\' and `%s\', because:
','TYP360' =>'Functions have different number of arguments. One has %d, the other has %d','TYP370' =>'Parameter number %d of function needs to be a `%s\', but it is a `%s\'','TYP380' =>'I was expecting to have a function with return type of `%s\', but you gave me a `%s\'','TYP390' =>'Cannot merge type `%s\' with `%s\', I\'m sorry','TYP400' =>'Ambiguous type for `%s\' & `%s\' because:
     > `%s\' can be either `%s\' or `%s\'','TYP410' =>'A JSX child should be a component or a string, but you gave me `%s\' and I\'m very sad about that'];} return sprintf(...array_merge([static::$messages[$key]],$arguments));}}} namespace _0\_3{ use \ReflectionClass;abstract class _3{const EOF=-1;const EOF_TYPE=0;public $input;public $position=0;public $peek;protected $words=[];public $keywords=[];public function __construct($input){$this->size=strlen($input);if($this->size ===0){exit;} $this->input=$input;$this->peek=$input[0];$this->_4(new _5(_6::T_TRUE,'true'));$this->_4(new _5(_6::T_FALSE,'false'));$this->_4(new _5(_6::T_LET,'let'));$this->_4(new _5(_6::T_IF,'if'));$this->_4(new _5(_6::T_FOR,'for'));$this->_4(new _5(_6::T_WHILE,'while'));$this->_4(new _5(_6::T_DO,'do'));$this->_4(new _5(_6::T_FOREACH,'foreach'));$this->_4(new _5(_6::T_IN,'in'));$this->_4(new _5(_6::T_MOD,'mod'));$this->_4(new _5(_6::T_WHERE,'where'));$this->_4(new _5(_6::T_NIL,'nil'));$this->_4(new _5(_6::T_CONTINUE,'continue'));$this->_4(new _5(_6::T_SWITCH,'switch'));$this->_4(new _5(_6::T_BREAK,'break'));$this->_4(new _5(_6::T_AND,'and'));$this->_4(new _5(_6::T_OR,'or'));$this->_4(new _5(_6::T_XOR,'xor'));$this->_4(new _5(_6::T_TRY,'try'));$this->_4(new _5(_6::T_RESCUE,'rescue'));$this->_4(new _5(_6::T_FINALLY,'finally'));$this->_4(new _5(_6::T_RAISE,'raise'));$this->_4(new _5(_6::T_ELIF,'elif'));$this->_4(new _5(_6::T_ELSE,'else'));$this->_4(new _5(_6::T_CASE,'case'));$this->_4(new _5(_6::T_NOT,'not'));$this->_4(new _5(_6::T_FN,'fn'));$this->_4(new _5(_6::T_THEN,'then'));$this->_4(new _5(_6::T_BEGIN,'begin'));$this->_4(new _5(_6::T_END,'end'));$this->_4(new _5(_6::T_FROM,'from'));$this->_4(new _5(_6::T_TO,'to'));$this->_4(new _5(_6::T_BY,'by'));$this->_4(new _5(_6::T_WHEN,'when'));$this->_4(new _5(_6::T_UNLESS,'unless'));$this->_4(new _5(_6::T_MUT,'mut'));} private function _4(_5 $t){$this->keywords[$t->_7()]=$t->lexeme;$this->words[$t->lexeme]=$t;} protected function _8(){return $this->position >=$this->size;} public function rewind(){if($this->size ===0){exit;} $this->position=0;$this->peek=$this->input[0];} public function _9($n=1){$this->position +=$n;$this->peek=$this->_8() ?self::EOF :$this->input[$this->position];} public function stepback($n=1){$pos=$this->position - $n;$this->position=max($pos,0);$this->peek=$this->input[$this->position];} public function preview($n=1){$next=$this->position + $n;return $next >=$this->size ?self::EOF :$this->input[$next];} public function previous(){$previous=$this->position - 1;return $previous <0 ?null :$this->input[$previous];} public function matches($string){$len=strlen($string);for($i=0;$i <$len;$i++){if($this->preview($i) !==$string[$i]){return false;}} return true;} protected function getWord($word){return isset($this->words[$word]) ?$this->words[$word] :null;} public function is($symbol){return $this->peek ===$symbol;} abstract public function nextToken();}class _10{private $tag;private $content;public $metadata=[];public function __construct($tag,$content=null){$this->tag=$tag;$this->content=$content;} public function _7(){return $this->tag;} public function _11(){return $this->content;} public function __toString(){if(!is_null($this->content)){$tag_name=_6::getName($this->tag);return "[" .$tag_name .", " .$this->content ."]";} return "[" .$this->tag ."]";}}class _6{const T_IDENT=253;const T_INT_BIN=255;const T_INT_OCT=256;const T_INT_HEX=257;const T_INTEGER=258;const T_DOUBLE=400;const T_DOUBLE_EXP=401;const T_STRING=600;const T_ATOM=601;const T_REGEX=1001;const T_TRUE=260;const T_FALSE=261;const T_IF=262;const T_FOR=263;const T_WHILE=264;const T_DO=265;const T_NIL=272;const T_LET=273;const T_WHERE=280;const T_FOREACH=281;const T_IN=284;const T_AS=504;const T_CONTINUE=508;const T_SWITCH=509;const T_BREAK=510;const T_AND=511;const T_OR=512;const T_XOR=513;const T_TRY=515;const T_RESCUE=516;const T_FINALLY=517;const T_RAISE=518;const T_ELIF=520;const T_ELSE=521;const T_CASE=522;const T_MOD=292;const T_NOT=293;const T_FN=294;const T_THEN=300;const T_BEGIN=301;const T_END=302;const T_FROM=303;const T_TO=304;const T_BY=305;const T_WHEN=306;const T_UNLESS=307;const T_MUT=308;public static function _12($op){switch($op){case _6::T_NOT:return 'not';case _6::T_AND:return 'and';case _6::T_OR:return 'or';case _6::T_MOD:return 'mod';case _6::T_XOR:return 'xor';default:return $op;}} public static function & getPartialOperators(){static $op_table=[ '+','-','*','/','**',_6::T_MOD,_6::T_XOR,_6::T_AND,_6::T_OR,'<','>','<=','>=','=','<>','=~','<<','>>','~','|','&','|>','.','??','++',];return $op_table;} public static function getName($tag){$token_name=array_search($tag,(new ReflectionClass(__CLASS__))->getConstants(),true);return false ===$token_name ?$tag :$token_name;}}class SymbolDecypher{public static function __callStatic($method,$args){$context=&$args[0];switch($method){case '<':return static::_13($context,['<<','<>','<=','</']);case '>':return static::_13($context,['>>','>=','>>']);case ':':return static::_13($context,['::',':-']);case '*':return static::_13($context,['**']);case '=':return static::_13($context,['=~']);case '|':return static::_13($context,['|>']);case '-':return static::_13($context,['->']);case '&':return static::_13($context,['&{','&(']);case '.':return static::_13($context,['..']);case '#':return static::_13($context,['#{','#(']);case '%':return static::_13($context,['%{']);case '/':return static::_13($context,['/>']);default:return static::fetch($context,$context->peek);}} private static function _13(&$context,$operator_list){foreach($operator_list as $operator){if($context->matches($operator)){return static::fetch($context,$operator);}} return static::fetch($context,$context->peek);} private static function fetch($context,$symbol){$size=strlen($symbol);$context->_9($size);$context->column +=$size;return new _10($symbol);}}class _14 extends _3{public $line=1;public $column=0;public function __construct($input){parent::__construct($input);} public function nextToken(){while($this->peek !=self::EOF){if(ctype_digit($this->peek)){return $this->digit();} if((ctype_alpha($this->peek) ||$this->is('_')) ||($this->is('_') && ctype_alnum((string) $this->preview()))){return $this->identifier();} if(ctype_space($this->peek)){$this->space();continue;} if($this->matches('@') &&(ctype_alpha($this->preview()) ||'_' ===$this->preview())){return $this->atom();} if($this->matches('--') ||$this->matches('#!')){$this->singlelineComment();continue;} if($this->matches('{-')){$this->multilineComment();continue;} if($this->is('"') ||$this->is("'")){return $this->string($this->peek);} if($this->matches('&/')){return $this->regex();}  return SymbolDecypher::{$this->peek}($this);} return new _10(self::EOF_TYPE);} public function digit(){$buffer=[];$number=$this->_15();if(!$this->_8() && $number ==='0' && ctype_xdigit($this->preview())){$tag=_6::T_INT_HEX;$found=false;if($this->peek ==='x'){$found=true;$buffer[]=$number;do{$buffer[]=$this->_15();} while(ctype_xdigit($this->peek));} else{$bits=0;if(ctype_digit($this->preview())){if($this->peek ==='b'){$bits=1;$tag=_6::T_INT_BIN;$found=true;} else if($this->peek ==='o'){$bits=3;$tag=_6::T_INT_OCT;$found=true;} if($found){$buffer[]=$number;do{$buffer[]=$this->_15();} while(ctype_digit($this->peek) && !((int) $this->peek >>$bits));if(ctype_alpha(end($buffer))){$found=false;$buffer=[];$this->stepback();}}}} if($found){$value=implode($buffer);$this->column +=sizeof($buffer);return new _10($tag,$value);}} $tag=_6::T_INTEGER;$buffer[]=$number;$buffer=array_merge($buffer,$this->integer());if(!$this->_8() && $this->peek ==='.' && ctype_digit($this->preview())){$tag=_6::T_DOUBLE;$buffer[]=$this->_15();$buffer=array_merge($buffer,$this->integer());}  if(!$this->_8() && $this->is('e')){if(ctype_digit($this->preview())){$tag=_6::T_DOUBLE_EXP;$buffer[]=$this->_15();$buffer=array_merge($buffer,$this->integer());} else if(($this->preview() ==='+' ||$this->preview() ==='-') && ctype_digit($this->preview(2))){$tag=_6::T_DOUBLE_EXP;$buffer[]=$this->_15();$buffer[]=$this->_15();$buffer=array_merge($buffer,$this->integer());}} $value=implode($buffer);$this->column +=sizeof($buffer);return new _10($tag,$value);} private function integer(){$arr=[];while(!$this->_8() && ctype_digit($this->peek)){$arr[]=$this->_15();} return $arr;} private function identifier(){$buffer=[];do{$buffer[]=$this->_15();} while(ctype_alnum((string) $this->peek) ||$this->peek ==='_');$string=implode($buffer);$word=$this->getWord($string);$this->column +=sizeof($buffer);if($word !==null){return $word;} return new _10(_6::T_IDENT,$string);} private function space(){$new_line=array_map('ord',["\r","\n","\r\n",PHP_EOL]);do{if(in_array(ord($this->peek),$new_line)){$this->line++;$this->column=1;} else{$this->column++;} $this->_9();} while(ctype_space($this->peek));} private function string($delimiter){$this->_9();$this->column++;$buffer=[];while(!$this->_8() && !($this->is($delimiter) && $this->previous() !=='\\')){$buffer[]=$this->_15();$this->column++;} $string=implode($buffer);if(!$this->_8()){$this->_9();$this->column++;} $token=new _10(_6::T_STRING,$string);$token->metadata['delimiter']=$delimiter;return $token;} private function regex(){$buffer=[];$buffer[]=$this->_15();$buffer[]=$this->_15();$this->column +=2;while(!$this->_8() && !($this->is('/') && $this->previous() !=='\\')){$buffer[]=$this->_15();$this->column++;} if(!$this->_8()){$buffer[]=$this->_15();$this->column++;}  $allowed_modifiers=[ 'i','m','s','x','e','A','D','S','U','X','J','u' ];while(!$this->_8()){$char=$this->_15();if(in_array($char,$allowed_modifiers,true)){$buffer[]=$char;$this->column++;} else{$this->column--;$this->stepback();break;}} $regex=implode($buffer);return new _10(_6::T_REGEX,$regex);} private function singleLineComment(){$newline=array_map('ord',["\r","\n","\r\n",PHP_EOL]);$this->_9(2);while(!$this->_8()){$code=ord($this->_15());$this->column++;if(in_array($code,$newline,true)){$this->line++;break;}}} private function multilineComment(){$newline=array_map('ord',["\r","\n","\r\n",PHP_EOL]);$this->_9(2);while(!$this->_8() && !$this->matches('-}')){$code=ord($this->_15());$this->column++;if(in_array($code,$newline,true)){$this->line++;}} if(!$this->_8()){$this->_9(2);$this->column +=2;}} private function atom(){do{$buffer[]=$this->_15();$this->column++;} while(ctype_alnum((string) $this->peek) ||$this->peek ==='_');$atom=implode($buffer);return new _10(_6::T_ATOM,$atom);} private function _15(){$char=$this->peek;$this->_9();return $char;} public function eagerlyEvaluate(){$this->rewind();$token_stream=[];while($this->peek !=self::EOF){$token_stream[]=$this->nextToken();} return $token_stream;} public function printTokens(){$this->rewind();$token=$this->nextToken();while($token->_7() !==static::EOF_TYPE){echo $token;$token=$this->nextToken();}}}class _5 extends _10{public $lexeme;public function __construct($tag,$word){parent::__construct($tag);$this->lexeme=(string) $word;} public function __toString(){return "[" .$this->lexeme ."]";}}} namespace _0\_16{ use \_0\_17\_18\_18;use \_0\_3\_10;use \_0\_19\_20;interface _21{public function _22($parser,$left,_10 $token);public function _23();}interface _24{public function _22($parser,_10 $token);}trait _25{private $prefix=[];private $infix=[];protected function _26($tag,$parselet){if($parselet instanceof _24){$this->prefix[$tag]=$parselet;} elseif($parselet instanceof _21){$this->infix[$tag]=$parselet;}} public function _27(_10 $token){$key=$token->_7();return array_key_exists($key,$this->infix) ?$this->infix[$key] :null;} public function prefixParseletForToken(_10 $token){$key=$token->_7();return array_key_exists($key,$this->prefix) ?$this->prefix[$key] :null;} private function _23(){$parselet=$this->_27($this->reader->lookahead);return !is_null($parselet) ?$parselet->_23() :0;}}} namespace _0\_16\_18{ use \_0\_19\_20;use \_0\_17\_18\ObjectExpr;use \_0\_3\_10;use \_0\_16\_24;use \_0\_19\_33;use \_0\_17\_18\_34;use \_0\_3\_6;use \_0\_17\_18\PartialFuncExpr;use \_0\_17\_18\AccessExpr;use \_0\_17\_18\_18;use \_0\_16\_21;use \_0\_17\_18\_37;use \_0\_17\_18\JSX\JSXElement;use \_0\_19\_38;use \_0\_17\_18\LambdaExpr;use \_0\_17\_18\_43;use \_0\_17\_18\_45;use \_0\_17\_18\_46;use \_0\_17\_18\NameExpr;use \_0\_17\_18\PrefixExpr;use \_0\_17\_18\_49;use \_0\_17\_18\_50;use \_0\_17\_18\_51;use \_0\_17\_18\_52;use \_0\_17\_18\NilExpr;use \_0\_17\_18\BoolExpr;use \_0\_17\_18\_53;use \_0\_17\_18\MapExpr;use \_0\_17\_18\PostfixExpr;use \_0\_17\_18\RangeExpr;use \_0\_17\_18\_57;use \_0\_17\_58\_59;class _28 implements _24{public function _22($grammar,_10 $token){$keys=[];$values=[];if(!$grammar->reader->_29('}')){$keys[]=$grammar->name_parser->_30();$grammar->reader->_31(':');$values[]=$grammar->_32();while($grammar->reader->_29(',')){$keys[]=$grammar->name_parser->_30();$grammar->reader->_31(':');$values[]=$grammar->_32();} $grammar->reader->_31('}');} return new ObjectExpr($keys,$values);}}class WhenParselet implements _24{public function _22($grammar,_10 $token){$cases=[];$default=null;do{if(null ===$default && $grammar->reader->is(_6::T_ELSE)){$grammar->reader->_9();$default=new \stdClass;$default->condition=null;$default->action=$grammar->_32();$cases[]=$default;} else{$case=new \stdClass;$case->condition=$grammar->_32();$grammar->reader->_31('->');$case->action=$grammar->_32();$cases[]=$case;} if(!$grammar->reader->is(_6::T_END)){$grammar->reader->_31(',');} else{break;}} while(true);$grammar->reader->_31(_6::T_END);return new _34($cases);}}class _35 implements _24{public function _22($grammar,_10 $token){$expr=$grammar->_32();$expr->addParentheses();$grammar->reader->_31(')');return $expr;}}class _36 implements _24{public function _22($grammar,_10 $token){$op_table=&_6::getPartialOperators();$next_op=$grammar->reader->lookahead->_7();$right=null;if(in_array($next_op,$op_table,true)){$grammar->reader->_31($next_op);if(!$grammar->reader->is(')')){$right=$grammar->_32();} $grammar->reader->_31(')');} else{$grammar->reader->_31('operator');} return new PartialFuncExpr($next_op,$right);}}class AccessParselet implements _21{public function _22($grammar,$left,_10 $token){$index=$grammar->_32();$grammar->reader->_31('}');return new AccessExpr($left,$index);} public function _23(){return _33::ACCESS;}}class JSXParselet implements _24{private $grammar;private $reader;private $name_parser;public function _22($grammar,_10 $token){$this->grammar=$grammar;$this->reader=$grammar->reader;$this->name_parser=$grammar->name_parser;return $this->JSXElement(true);} public function JSXElement($partial=false){if(!$partial){$this->reader->_31('<');} $name=$this->name_parser->_30();$attributes=[];while(!$this->reader->is('/>') && !$this->reader->is('>')){$attributes[]=$this->JSXAttribute();} if($this->reader->_29('/>')){return new JSXElement($name,$attributes,null);} $this->reader->_31('>');$children=[];while(!$this->reader->is('</')){$children[]=$this->JSXChild();} $this->reader->_31('</');$closing_tag=$this->name_parser->_30();if($name !==$closing_tag){throw new _38([ 'expected' =>"</{$name}>",'found' =>$this->reader->lookahead,'parser' =>$this->reader ]);} $this->reader->_31('>');return new JSXElement($name,$attributes,$children);} public function JSXChild(){if($this->reader->is('<')){return $this->JSXElement();} $this->reader->_31('{');$expr=$this->grammar->_32();$this->reader->_31('}');return $expr;} public function JSXAttribute(){$name=$this->name_parser->_30();if(!$this->reader->_29(':')){return [$name];} if($this->reader->is(_6::T_STRING)){$token=$this->reader->lookahead;$content=$this->reader->_9();return [$name,new _37($content,$token->metadata['delimiter'])];} $this->reader->_31('{');$value=$this->grammar->_32();$this->reader->_31('}');return [$name,$value];}}class _39 implements _24{const _40=0x1;const _41=0x2;public function _22($grammar,_10 $token){$parameters=[];$kind=null;$body=null;$has_brackets=false;if($grammar->reader->is(_6::T_IDENT)){$name=$grammar->name_parser->_30();$parameters[]=(object) [ 'name' =>$name,'type' =>null ];} else{$has_brackets=true;$grammar->reader->_31('[');if(!$grammar->reader->_29(']')){$parameters[]=$grammar->stmt_parser->_parameter();while($grammar->reader->_29(',')){$parameters[]=$grammar->stmt_parser->_parameter();} $grammar->reader->_31(']');}} $grammar->reader->_31('->');if($grammar->reader->is(_6::T_BEGIN)){$kind=static::_41;$grammar->reader->_9();$body=iterator_to_array($grammar->stmt_parser->_42());$grammar->reader->_31(_6::T_END);} else{$kind=static::_40;$body=$grammar->_32();} return new LambdaExpr($parameters,$kind,$body,$has_brackets);}}class _44 implements _21{public $precedence;public $is_right;public function __construct($precedence,$is_right){$this->precedence=$precedence;$this->is_right=$is_right;} public function _22($grammar,$left,_10 $token){$right=$grammar->_32($this->precedence - (int) $this->is_right);return new _43($left,$token->_7(),$right);} public function _23(){return $this->precedence;}}class ArrayParselet implements _24{public function _22($grammar,_10 $token){$items=[];if($grammar->reader->is('}')){$grammar->reader->_9();} else{$items[]=$grammar->_32();while($grammar->reader->is(',')){$grammar->reader->_9();$items[]=$grammar->_32();} $grammar->reader->_31('}');} return new _45($items);}}class _47 implements _21{public function _22($grammar,$left,_10 $token){$right=$grammar->name_parser->_30();return new _43($left,$token->_7(),$right);} public function _23(){return _33::MEMBER_ACCESS;}}class _48 implements _24{public function _22($parser,_10 $token){$operand=$parser->_32(_33::PREFIX);return new PrefixExpr($token,$operand);}}class CallParselet implements _21{public function _22($grammar,$left,_10 $token){$args=[];if(!$grammar->reader->is(')')){$args[]=$grammar->_32();while($grammar->reader->is(',')){$grammar->reader->_9();$args[]=$grammar->_32();}} $grammar->reader->_31(')');return new _49($left,$args);} public function _23(){return _33::CALL;}}class WhereParselet implements _21{public function _22($grammar,$left,_10 $token){$clauses=[];$name=$grammar->name_parser->_30();$grammar->reader->_31(':-');$value=$grammar->_32();$clauses[]=[$name,$value];while($grammar->reader->is(',')){$grammar->reader->_9();$name=$grammar->name_parser->_30();$grammar->reader->_31(':-');$value=$grammar->_32();$clauses[]=[$name,$value];} return new _50($left,$clauses);} public function _23(){return _33::WHERE;}}class _54 implements _24{public function _22($grammar,_10 $token){$tag=$token->_7();$content=$token->_11();switch($tag){case _6::T_ATOM:return new _52($content);case _6::T_STRING:return new _37($content,$token->metadata['delimiter']);case _6::T_DOUBLE:case _6::T_INTEGER:return new _51($content,$tag ===_6::T_DOUBLE ?'double' :'int');case _6::T_INT_HEX:return new _51($content,'int','hexadec');case _6::T_INT_OCT:return new _51($content,'int','octal');case _6::T_INT_BIN:return new _51($content,'int','binary');case _6::T_DOUBLE_EXP:return new _51($content,'double','scientific');case _6::T_NIL:return new NilExpr();case _6::T_TRUE:case _6::T_FALSE:return new BoolExpr($tag ===_6::T_TRUE);case _6::T_REGEX:return new _53($content);}}}class MapParselet implements _24{public function _22($grammar,_10 $token){$keys=[];$values=[];if($grammar->reader->is('}')){$grammar->reader->_9();} else{$keys[]=$grammar->_32();$grammar->reader->_31(':');$values[]=$grammar->_32();while($grammar->reader->is(',')){$grammar->reader->_9();$keys[]=$grammar->_32();$grammar->reader->_31(':');$values[]=$grammar->_32();} $grammar->reader->_31('}');} return new MapExpr($keys,$values);}}class _55 implements _21{public $precedence;public function __construct($precedence){$this->precedence=$precedence;} public function _22($grammar,$left,_10 $token){return new PostfixExpr($left,$token->_7());} public function _23(){return $this->precedence;}}class _56 implements _21{public function _22($grammar,$from,_10 $token){$to=$grammar->_32();$by=null;if($grammar->reader->is(_6::T_BY)){$grammar->reader->_9();$by=$grammar->_32();} return new RangeExpr($from,$to,$by);} public function _23(){return _33::RANGE;}}class _60 implements _24{public function _22($grammar,_10 $token){$body=new _59(iterator_to_array($grammar->stmt_parser->_42()));$grammar->reader->_31('}');return new _57($body);}}class _61 implements _21{public function _22($grammar,$left,_10 $token){$then=$grammar->_32();$grammar->reader->_31(_6::T_ELSE);$else=$grammar->_32(_33::TERNARY - 1);return new _46($left,$then,$else);} public function _23(){return _33::TERNARY;}}class _62 implements _24{public function _22($grammar,_10 $token){return new NameExpr($token->_11());}}} namespace _0\_16\_63{ use \_0\_17\_63\InstanceType;use \_0\_3\_10;use \_0\_16\_24;use \_0\_17\_63\_64;use \_0\_17\_63\AtomType;use \_0\_3\_6;use \_0\_17\_63\_65;use \_0\_17\_63\_66;use \_0\_17\_63\_67;use \_0\_63\_68;use \_0\_17\_63\_70;use \_0\_17\_63\_72;use \_0\_17\_63\_73;use \_0\_17\_63\_75;use \_0\_19\TypeParser;use \_0\_16\_21;class InstanceTypeParselet implements _24{public function _22($grammar,_10 $token){$instance=$grammar->name_parser->_qualifiedName();return new InstanceType($instance);}}class ObjectTypeParselet implements _24{public function _22($grammar,_10 $token){$properties=[];if(!$grammar->reader->is('}')){do{$key=$grammar->name_parser->_30();$grammar->reader->_31(':');$properties[$key]=$grammar->_type();} while($grammar->reader->_29(','));} $grammar->reader->_31('}');return new _64($properties);}}class AtomTypeParselet implements _24{public function _22($grammar,_10 $token){return new AtomType($token->_11());}}class ListTypeParselet implements _24{public function _22($grammar,_10 $token){$type=$grammar->_type();$grammar->reader->_31('}');return new _65($type);}}class _69 implements _24{public function _22($grammar,_10 $token){$names=[ 'string' =>_68::T_STR,'number' =>_68::T_NUMBER,'boolean' =>_68::T_BOOL,'regex' =>_68::T_REGEX,'block' =>_68::T_BLOCK,'unit' =>_68::T_UNIT,'byte' =>_68::T_BYTE,'atom' =>_68::T_ATOM ];$name=$token->_11();return array_key_exists($name,$names) ?new _66($names[$name]) :new _67($name);}}class _71 implements _24{public function _22($grammar,_10 $token){$parameters=[];$return=new _66(_68::T_UNIT);if($grammar->reader->is(_6::T_IDENT)){$parameters[]=$grammar->_type();} else{$grammar->reader->_31('[');if(!$grammar->reader->_29(']')){do{$parameters[]=$grammar->_type();} while($grammar->reader->_29(','));$grammar->reader->_31(']');}} if($grammar->reader->_29('->')){$return=$grammar->_type();} return new _70($parameters,$return);}}class TupleTypeParselet implements _24{public function _22($grammar,_10 $token){$types=[];if(!$grammar->reader->_29(')')){do{$types[]=$grammar->_type();} while($grammar->reader->_29(','));$grammar->reader->_31(')');} return new _72(...$types);}}class MapTypeParselet implements _24{public function _22($grammar,_10 $token){$key=$grammar->_type();$grammar->reader->_31(':');$value=$grammar->_type();$grammar->reader->_31('}');return new _73($key,$value);}}class _74 implements _24{public function _22($grammar,_10 $token){$type=$grammar->_type();$type->addParentheses();$grammar->reader->_31(')');return $type;}}class _76 implements _21{public $precedence;public $is_right;public function __construct($precedence,$is_right){$this->precedence=$precedence;$this->is_right=$is_right;} public function _22($parser,$left,_10 $token){$right=$parser->_type($this->precedence - (int) $this->is_right);return new _75($left,$token->_7(),$right);} public function _23(){return $this->precedence;}}} namespace _0\_19{ use \Exception;use \_0\_3\_6;use \_0\_3\_10;use \_0\_3\_14;use \_0\_16\_25;use \_0\_16\_18\_44;use \_0\_16\_18\_54;use \_0\_16\_18\_62;use \_0\_16\_18\_55;use \_0\_16\_18\_48;use \_0\_16\_18\_61;use \_0\_16\_18\_35;use \_0\_16\_18\_39;use \_0\_16\_18\ArrayParselet;use \_0\_16\_18\_47;use \_0\_16\_18\WhenParselet;use \_0\_16\_18\CallParselet;use \_0\_16\_18\AccessParselet;use \_0\_16\_18\_56;use \_0\_16\_18\_36;use \_0\_16\_18\WhereParselet;use \_0\_16\_18\MapParselet;use \_0\_16\_18\_28;use \_0\_16\_18\_60;use \_0\_16\_18\JSXParselet;use \_0\_17\_63\_70;use \_0\_17\_63\_67;use \_0\_17\_63\InstanceType;use \_0\_17\_63\_65;use \_0\_17\_63\_66;use \_0\_17\_63\_73;use \_0\_17\_63\_64;use \_0\_17\_63\_72;use \_0\_16\_63\AtomTypeParselet;use \_0\_16\_63\_76;use \_0\_16\_63\_71;use \_0\_16\_63\_74;use \_0\_16\_63\InstanceTypeParselet;use \_0\_16\_63\ListTypeParselet;use \_0\_16\_63\_69;use \_0\_16\_63\MapTypeParselet;use \_0\_16\_63\ObjectTypeParselet;use \_0\_16\_63\TupleTypeParselet;use \_0\_63\_68;use \_0\_3\_5;use \_0\_17\_58\FnStmt;use \_0\_17\_58\_86;use \_0\_17\_58\ModuleStmt;use \_0\_17\_58\_59;use \_0\_17\_58\BlockStmt;use \_0\_17\_58\BreakStmt;use \_0\_17\_58\CaseStmt;use \_0\_17\_58\ContinueStmt;use \_0\_17\_58\ElifStmt;use \_0\_17\_58\ExprStmt;use \_0\_17\_58\ForeachStmt;use \_0\_17\_58\ForStmt;use \_0\_17\_58\IfStmt;use \_0\_17\_58\LabelStmt;use \_0\_17\_58\_87;use \_0\_17\_58\_88;use \_0\_17\_58\ProgramStmt;use \_0\_17\_58\RaiseStmt;use \_0\_17\_58\ReturnStmt;use \_0\_17\_58\SwitchStmt;use \_0\_17\_58\TryStmt;use \_0\_17\_58\WhileStmt;abstract class _19{use _25;public $input;public $lookahead;public $scope_level=0;public function __construct(_14 $input){$this->input=$input;$this->_9();} public function _31($tag){$hint=null;if($this->lookahead->_7() ===$tag){return $this->_9();}    if(_6::T_IDENT ===$this->lookahead->_7() && array_key_exists($tag,$this->input->keywords)){$expected_lexeme=$this->input->keywords[$tag];$provided_lexeme=$this->lookahead->_11();$distance=levenshtein($expected_lexeme,$provided_lexeme);if($distance <=2){$hint="Did you mean \"{$expected_lexeme}\" instead of \"{$provided_lexeme}\"?";}} $params=[ 'expected' =>$tag,'found' =>$this->lookahead,'parser' =>$this,'hint' =>$hint ];if(0 ===$this->lookahead->_7()){throw new _77($params);};throw new _38($params);} public function opt($tag){if($this->lookahead->_7() ===$tag){$pointer=$this->_9();return $pointer ===null ?true :$pointer;} return false;} public function is($tag){return $this->lookahead->_7() ===$tag;} public function _9(){$content=$this->lookahead ===null ?:$this->lookahead->_11();$this->lookahead=$this->input->nextToken();return $content;} public function _29($symbol){if($this->is($symbol)){$this->_9();return true;} return false;} public function _78(){$clone=$this->lookahead;$this->lookahead=$this->input->nextToken();return $clone;} public function position(){return ["line" =>$this->input->line,"column" =>$this->input->column];} public function _79(){$this->scope_level++;} public function _80(){$this->scope_level--;} public function _81(){return str_repeat('  ',$this->scope_level);} public function dedent(){return str_repeat('  ',max(0,$this->scope_level - 1));}}class TokenChecker{private $reader;public function __construct(_82 $reader){$this->reader=$reader;} public function startsInnerStmt(){$possible_inner_stmts=[_6::T_FN];return in_array($this->reader->lookahead->_7(),$possible_inner_stmts,true) ||$this->startsStmt();} public function startsStmt(){static $possible_stmts=[ _6::T_IF,_6::T_LET,_6::T_WHILE,_6::T_DO,_6::T_FOR,_6::T_FOREACH,_6::T_SWITCH,_6::T_TRY,_6::T_BREAK,_6::T_CONTINUE,_6::T_RAISE,_6::T_BEGIN,'^','[' ];$next_tag=$this->reader->lookahead->_7();return in_array($next_tag,$possible_stmts,true);} public function isEoF(){return 0 ===$this->reader->lookahead->_7();}}class ExprParser{use _83;use _25;public $reader;public function __construct($reader){$this->reader=$reader;$this->_26('&(',new _36);$this->_26(_6::T_INTEGER,new _54);$this->_26(_6::T_INT_HEX,new _54);$this->_26(_6::T_INT_OCT,new _54);$this->_26(_6::T_INT_BIN,new _54);$this->_26(_6::T_DOUBLE,new _54);$this->_26(_6::T_DOUBLE_EXP,new _54);$this->_26(_6::T_STRING,new _54);$this->_26(_6::T_REGEX,new _54);$this->_26(_6::T_IDENT,new _62);$this->_26(_6::T_THEN,new _61);$this->_26('..',new _56);$this->_26('(',new _35);$this->_26('(',new CallParselet);$this->_26('{',new ArrayParselet);$this->_26('{',new AccessParselet);$this->_26('%{',new _28);$this->_26('#{',new MapParselet);$this->_26('&{',new _60);$this->_26('&',new _39);$this->_26('.',new _47);$this->_26(_6::T_TRUE,new _54);$this->_26(_6::T_FALSE,new _54);$this->_26(_6::T_NIL,new _54);$this->_26(_6::T_ATOM,new _54);$this->_26(_6::T_WHEN,new WhenParselet);$this->_26(_6::T_WHERE,new WhereParselet);$this->prefix('+');$this->prefix('-');$this->prefix('^^');$this->prefix('*');$this->prefix('~');$this->prefix(_6::T_NOT);$this->_84('+',_33::ADDITIVE);$this->_84('-',_33::ADDITIVE);$this->_84('*',_33::MULTIPLICATIVE);$this->_84('/',_33::MULTIPLICATIVE);$this->_84(_6::T_MOD,_33::MULTIPLICATIVE);$this->_84(_6::T_AND,_33::LOGICAL_AND);$this->_84(_6::T_OR,_33::LOGICAL_OR);$this->_84(_6::T_XOR,_33::LOGICAL_XOR);$this->_84('|',_33::BITWISE_OR);$this->_84('&',_33::BITWISE_AND);$this->_84('^',_33::BITWISE_XOR);$this->_84('<<',_33::BITWISE_SHIFT);$this->_84('>>',_33::BITWISE_SHIFT);$this->_84('=',_33::VALUE_COMPARATOR);$this->_84('=~',_33::VALUE_COMPARATOR);$this->_84('<>',_33::VALUE_COMPARATOR);$this->_84('<=',_33::SIZE_COMPARATOR);$this->_84('<',_33::SIZE_COMPARATOR);$this->_84('>=',_33::SIZE_COMPARATOR);$this->_84('>',_33::SIZE_COMPARATOR);$this->_84('|>',_33::PIPELINE);$this->_84('??',_33::COALESCENCE);$this->infixRight('**',_33::EXPONENT);$this->infixRight(':-',_33::ASSIGNMENT);$this->_26('<',new JSXParselet);} public function _32($precedence=0,$opt=false){$token=$this->reader->lookahead;$prefix=$this->prefixParseletForToken($token);if(is_null($prefix)){if(!$opt){throw new _38([ 'expected' =>'expression','found' =>$token,'parser' =>$this->reader ]);} return null;}   $this->reader->_9();$left=$prefix->_22($this,$token);while($precedence <$this->_23()){$token=$this->reader->_78();$infix=$this->_27($token);$left=$infix->_22($this,$left,$token);} return $left;} private function postfix($tag,$precedence){$this->_26($tag,new _55($precedence));} private function prefix($tag){$this->_26($tag,new _48());} private function _84($tag,$precedence){$this->_26($tag,new _44($precedence,false));} private function infixRight($tag,$precedence){$this->_26($tag,new _44($precedence,true));} public function _optExpr(){return $this->_32(0,true);}}class TypeParser{use _83;use _25;public $parser;public function __construct(_19 $parser){$this->reader=$parser;$this->_26('(',new _74);$this->_26(_6::T_ATOM,new AtomTypeParselet);$this->_26(_6::T_IDENT,new _69);$this->_26('{',new ListTypeParselet);$this->_26('#{',new MapTypeParselet);$this->_26('#(',new TupleTypeParselet);$this->_26('%',new InstanceTypeParselet);$this->_26('%{',new ObjectTypeParselet);$this->_26('&',new _71);$this->_26('|',new _76(_33::UNION_TYPE,false));$this->_26('&',new _76(_33::INTERSECTION_TYPE,false));} public function _type($precedence=0){$token=$this->reader->lookahead;$prefix=$this->prefixParseletForToken($token);if(is_null($prefix)){throw new _38([ 'expected' =>'type signature','found' =>$token,'parser' =>$this->reader ]);} $this->reader->_9();$left=$prefix->_22($this,$token);while($precedence <$this->_23()){$token=$this->reader->_78();$infix=$this->_27($token);$left=$infix->_22($this,$left,$token);} return $left;}}class _77 extends _38{public function __construct($parameters){parent::__construct($parameters);} protected function getFoundTokenName(){return "end of the source";}}class NameParser{use _83;public $reader;public function __construct($reader){$this->reader=$reader;} public function _30(){return $this->reader->_31(_6::T_IDENT);} public function _qualifiedName(){$names=[];do{$names[]=$this->_30();} while($this->reader->_29('.'));return $names;}}class _33{const ASSIGNMENT=1;const WHERE=2;const PIPELINE=3;const MEMBER_ACCESS=4;const TERNARY=5;const COALESCENCE=6;const RANGE=7;const LOGICAL_OR=8;const LOGICAL_XOR=9;const LOGICAL_AND=10;const BITWISE_OR=11;const BITWISE_XOR=12;const BITWISE_AND=13;const VALUE_COMPARATOR=14;const SIZE_COMPARATOR=15;const BITWISE_SHIFT=16;const ADDITIVE=17;const MULTIPLICATIVE=18;const PREFIX=19;const POSTFIX=20;const TYPE_CAST=21;const EXPONENT=22;const CALL=23;const ACCESS=24;const UNION_TYPE=1;const INTERSECTION_TYPE=2;}class _82 extends _19{private $main;public $ast=[];public $grammar;public function __construct(_14 $input){parent::__construct($input);$name_parser=new NameParser($this);$type_parser=new TypeParser($this);$expr_parser=new ExprParser($this);$decl_parser=new DeclParser($this);$stmt_parser=new StmtParser($this);$type_parser->attachParsers([ 'name_parser' =>$name_parser ]);$expr_parser->attachParsers([ 'name_parser' =>$name_parser,'stmt_parser' =>$stmt_parser ]);$decl_parser->attachParsers([ 'name_parser' =>$name_parser,'expr_parser' =>$expr_parser,'stmt_parser' =>$stmt_parser,'type_parser' =>$type_parser ]);$stmt_parser->attachParsers([ 'name_parser' =>$name_parser,'type_parser' =>$type_parser,'expr_parser' =>$expr_parser,'decl_parser' =>$decl_parser ]);$this->main=$stmt_parser;}  public function dumpAst(){var_dump($this->ast);} public function _85(){echo $this->beautify();} public function beautify(){return $this->ast->_85($this);} public function _22(){$this->ast=$this->main->_program();} public function evalParselet($grammar,$parselet){$token=$this->_78();return(new $parselet)->_22($grammar,$token);}}define('BEGIN_RED',"\033[01;31m");define('END_RED',"\033[0m");define('BEGIN_GREEN',"\033[01;32m");define('END_GREEN',"\033[0m");define('BEGIN_BG_RED',"\033[01;41m");define('END_BG_RED',"\033[0m");define('BEGIN_BOLD',"\033[1m");define('END_BOLD',"\033[0m");define('BEGIN_BLUE',"\033[0;34m");define('END_BLUE',"\033[0m");class _38 extends Exception{private $expected;private $found;private $parser;public function __construct($parameters){$this->expected=$parameters['expected'];$this->found=$parameters['found'];$this->reader=$parameters['parser'];$this->hint=array_key_exists('hint',$parameters) ?$parameters['hint'] :null;} private function extractPieceOfSource(){$out_buffer=[];$position=$this->getPosition();$token_size=$this->getFoundTokenSize();$new_column=$position['column'] - $token_size;$error_line=str_split( explode(PHP_EOL,$this->getOriginalSource()->input)[ $position['line'] - 1 ] );$line_indicator="{$position['line']}| ";$correct_piece=$new_column - 1 <=0 ?[] :array_slice($error_line,0,$new_column);$error_piece=array_slice($error_line,$new_column,$new_column + 10);$out_buffer[]=$line_indicator;$out_buffer[]=BEGIN_GREEN .implode($correct_piece) .END_GREEN;$out_buffer[]=BEGIN_BG_RED .implode($error_piece) .END_BG_RED;$out_buffer[]=PHP_EOL .str_repeat(' ',strlen($line_indicator) + sizeof($correct_piece));$out_buffer[]=BEGIN_BOLD .str_repeat('^',sizeof($error_piece)) .END_BOLD;return implode($out_buffer);} public function getFormattedHint(){if(null ===$this->hint){return '';} return PHP_EOL .PHP_EOL .BEGIN_BLUE .BEGIN_BOLD ."~Hint:" ." {$this->hint}" .END_BLUE .END_BOLD .PHP_EOL;} public function __toString(){$source=$this->extractPieceOfSource();$expected=$this->getExpectedTokenName();$found=$this->getFoundTokenName();$position=$this->getPosition();$hint=$this->getFormattedHint();return $source .PHP_EOL .join([ BEGIN_RED,"*** Hey, I found a syntax error!",PHP_EOL,"    Expecting [",BEGIN_GREEN,$expected,END_GREEN,BEGIN_RED,"]",PHP_EOL,"    Found     [",BEGIN_GREEN,$found,END_GREEN,BEGIN_RED,"]",PHP_EOL,"    Line      {$position['line']}",PHP_EOL,"    Column    ",($position['column'] - $this->getFoundTokenSize() + 1),PHP_EOL,END_RED,$hint ]);} private function getExpectedTokenName(){return is_integer($this->expected) ?_6::getName($this->expected) :$this->expected;} protected function getFoundTokenName(){$found_tag=$this->found->_7();return _6::getName($found_tag) ?:$found_tag;} private function getFoundTokenSize(){if($this->found instanceof _5){return strlen($this->found->lexeme);}  $offset=0;$found_tag=$this->found->_7();if(_6::T_STRING ===$found_tag){$offset +=2;} $token_val=$this->found->_11();return $offset +(0 ===$found_tag ?-1 :strlen(null !==$token_val ?$token_val :$found_tag));} private function getOriginalSource(){return $this->reader->input;} private function getPosition(){return $this->reader->position();}}class DeclParser{use _83;public $reader;public function __construct($reader){$this->reader=$reader;} public function _fnSignature(){$name=null;$parameters=[];$type=null;$name=$this->name_parser->_30();$this->reader->_31('(');if(!$this->reader->_29(')')){do{$parameters[]=$this->stmt_parser->_parameter();} while($this->reader->_29(','));$this->reader->_31(')');} if($this->reader->_29('->')){$type=$this->type_parser->_type();} return new _86($name,$parameters,$type);} public function _fnStmt($is_method=false){$is_short=false;$body=null;if(!$is_method){$this->reader->_31(_6::T_FN);} $signature=$this->_fnSignature();if($is_short=$this->reader->is(':-')){$this->reader->_9();$body=$this->expr_parser->_32();} else{$body=iterator_to_array($this->stmt_parser->_42());$this->reader->_31(_6::T_END);} return new FnStmt($signature,$body,$is_method,$is_short);}}class StmtParser{use _83;public $reader;public $checker;public function __construct($reader){$this->reader=$reader;$this->checker=new TokenChecker($reader);} public function _program(){return new ProgramStmt(iterator_to_array($this->_topStmtList()));} public function _topStmtList(){while(!$this->checker->isEoF()){yield $this->_topStmt();}} public function _42(){while($this->checker->startsInnerStmt()){yield $this->_innerStmt();}} public function _stmt(){$branch_table=[ _6::T_IF =>'_ifStmt',_6::T_LET =>'_letStmt',_6::T_WHILE =>'_whileStmt',_6::T_DO =>'_exprStmt',_6::T_FOR =>'_forStmt',_6::T_FOREACH =>'_foreachStmt',_6::T_SWITCH =>'_switchStmt',_6::T_TRY =>'_tryStmt',_6::T_BREAK =>'_breakStmt',_6::T_CONTINUE =>'_continueStmt',_6::T_RAISE =>'_raiseStmt',_6::T_BEGIN =>'_blockStmt','^' =>'_returnStmt','[' =>'_labelStmt' ];foreach($branch_table as $token =>$action){if($this->reader->is($token)){$first_class_stmt=$this->{$action}();if($this->reader->is(_6::T_WHEN) ||$this->reader->is(_6::T_UNLESS)){$tag=$this->reader->_78()->_7();$predicate=$this->expr_parser->_32();return new _88($first_class_stmt,$predicate,$tag);} return $first_class_stmt;}} $params=[ 'expected' =>'statement','found' =>$this->reader->lookahead,'parser' =>$this->reader ];if(0 ===$this->reader->lookahead->_7()){throw new _77($params);};throw new _38($params);} public function _exprStmt(){$this->reader->_31(_6::T_DO);$expr=$this->expr_parser->_32();return new ExprStmt($expr);} public function _blockStmt(){$this->reader->_31(_6::T_BEGIN);$body=iterator_to_array($this->_42());$this->reader->_31(_6::T_END);return new BlockStmt($body);} public function _ifStmt(){$this->reader->_31(_6::T_IF);$condition=$this->expr_parser->_32();$body=new _59(iterator_to_array($this->_42()));$elif=iterator_to_array($this->_elifList());$else=$this->_optElse();$this->reader->_31(_6::T_END);return new IfStmt($condition,$body,$elif,$else);} public function _letStmt(){$this->reader->_31(_6::T_LET);$mutable=$this->reader->_29(_6::T_MUT);$name=$this->name_parser->_30();$type=$this->reader->_29('::') ?$this->type_parser->_type() :null;$value=$this->reader->_29(':-') ?$this->expr_parser->_32() :null;return new _87($name,$type,$value,$mutable);} public function _whileStmt(){$this->reader->_31(_6::T_WHILE);$condition=$this->expr_parser->_32();$body=iterator_to_array($this->_42());$this->reader->_31(_6::T_END);return new WhileStmt($condition,$body);} public function _forStmt(){$this->reader->_31(_6::T_FOR);$variable=$this->name_parser->_30();$this->reader->_31(_6::T_FROM);$from=$this->expr_parser->_32();$this->reader->_31(_6::T_TO);$to=$this->expr_parser->_32();$by=null;if($this->reader->_29(_6::T_BY)){$by=$this->expr_parser->_32();} $body=new _59(iterator_to_array($this->_42()));$this->reader->_31(_6::T_END);return new ForStmt($variable,$from,$to,$by,$body);} public function _foreachStmt(){$key=null;$this->reader->_31(_6::T_FOREACH);if($this->reader->is(_6::T_IDENT)){$alias=$this->name_parser->_30();if($this->reader->_29(':')){$key=$alias;$alias=$this->name_parser->_30();}} else{$alias=$this->name_parser->_30();} $this->reader->_31(_6::T_IN);$iterable=$this->expr_parser->_32();$body=iterator_to_array($this->_42());$this->reader->_31(_6::T_END);return new ForeachStmt($key,$alias,$iterable,$body);} public function _switchStmt(){$this->reader->_31(_6::T_SWITCH);$value=$this->expr_parser->_32();$cases=iterator_to_array($this->_caseStmtList());$this->reader->_31(_6::T_END);return new SwitchStmt($value,$cases);} public function _tryStmt(){$this->reader->_31(_6::T_TRY);$body=new _59(iterator_to_array($this->_42()));$rescues=iterator_to_array($this->_rescueStmtList());$finally=$this->_optFinally();$this->reader->_31(_6::T_END);return new TryStmt($body,$rescues,$finally);} public function _breakStmt(){$this->reader->_31(_6::T_BREAK);$label=$this->_optLabel();return new BreakStmt($label);} public function _continueStmt(){$this->reader->_31(_6::T_CONTINUE);$label=$this->_optLabel();return new ContinueStmt($label);} public function _raiseStmt(){$this->reader->_31(_6::T_RAISE);$expression=$this->expr_parser->_32();return new RaiseStmt($expression);} public function _returnStmt(){$this->reader->_31('^');$expression=$this->expr_parser->_optExpr();return new ReturnStmt($expression);} public function _labelStmt(){$this->reader->_31('[');$label_name=$this->name_parser->_30();$this->reader->_31(']');$stmt=$this->_innerStmt();return new LabelStmt($label_name,$stmt);} public function _elifList(){while($this->reader->_29(_6::T_ELIF)){$condition=$this->expr_parser->_32();$body=iterator_to_array($this->_42());yield new ElifStmt($condition,$body);}} public function _optElse(){if(!$this->reader->is(_6::T_ELSE)){return null;} $this->reader->_9();return new _59(iterator_to_array($this->_42()));} public function _topStmt(){$decl_table=[ _6::T_FN =>'_fnStmt' ];$next_tag=$this->reader->lookahead->_7();if(array_key_exists($next_tag,$decl_table)){return call_user_func([$this->decl_parser,$decl_table[$next_tag]]);} return $this->_stmt();} public function _innerStmt(){$branch_table=[ _6::T_FN =>'_fnStmt' ];$next_tag=$this->reader->lookahead->_7();return array_key_exists($next_tag,$branch_table) ?call_user_func([$this,$branch_table[$next_tag]]) :$this->_stmt();} public function _parameter(){$name=$this->name_parser->_30();$type=null;if($this->reader->_29('::')){$type=$this->type_parser->_type();} return (object) [ 'name' =>$name,'type' =>$type ];} public function _caseStmtList(){$cases=[_6::T_CASE,_6::T_ELSE];while(in_array($this->reader->lookahead->_7(),$cases,true)){$is_else=$this->reader->is(_6::T_ELSE);$this->reader->_9();$value=$is_else ?null :$this->expr_parser->_32();$body=new _59(iterator_to_array($this->_42()));yield new CaseStmt($value,$body,$is_else);}} public function _rescueStmtList(){while($this->reader->_29(_6::T_RESCUE)){$this->reader->_31('(');$exception_class=$this->name_parser->_qualifiedName();$variable=$this->name_parser->_30();$this->reader->_31(')');$body=new _59(iterator_to_array($this->_42()));yield [ "exception_class" =>$exception_class,"variable" =>$variable,"body" =>$body ];}} public function _optFinally(){if($this->reader->_29(_6::T_FINALLY)){$body=new _59(iterator_to_array($this->_42()));return $body;} return null;} public function _optLabel(){return $this->reader->is(_6::T_IDENT) ?$this->name_parser->_30() :null;}}trait _83{public function attachParsers($parsers){foreach($parsers as $name =>$parser){$this->{$name}=$parser;}}}} namespace _0\_17{ use \_0\_17\_58\ConstStmt;use \_0\_1\_2;use \_0\_19\_19;use \_0\_89\_90;use \_0\_89\_89;use \_0\_89\_91;use \ReflectionClass;abstract class Node{abstract public function _85(_19 $parser);abstract public function _92(&$parent_scope);}} namespace _0\_17\_18{ use \_0\_17\Node;use \_0\_17\_63\_64;use \_0\_1\_2;use \_0\_19\_19;use \_0\_89\_91;use \_0\_63\_68;use \_0\_17\_63\_66;use \_0\_3\_6;use \_0\_89\_90;use \_0\_89\_95;use \_0\_89\_89;use \_0\_17\_63\AtomType;use \_0\_63\_97;use \_0\_17\_63\_70;use \_0\_17\_63\_67;use \_0\_16\_18\_39;use \_0\_17\_63\_65;use \_0\_3\_10;use \_0\_17\_63\_73;abstract class _18 extends Node{protected $parentheses_level=0;public function addParentheses(){$this->parentheses_level++;} public function removeParentheses(){$this->parentheses_level--;} protected function _93($source){$level=$this->parentheses_level;return str_repeat('(',$level) .$source .str_repeat(')',$level);}}class ObjectExpr extends _18{public $keys;public $values;public function __construct($keys,$values){$this->keys=$keys;$this->values=$values;} public function _85(_19 $parser){$source='%{';$keys=&$this->keys;$values=&$this->values;if(sizeof($this->keys) >0){$source .=PHP_EOL;$parser->_79();$source .=implode(',' .PHP_EOL,array_map(function($index) use($keys,$values,$parser){$subsource=$parser->_81();$subsource .=$keys[$index];$subsource .=': ';$subsource .=$values[$index]->_85($parser);return $subsource;},range(0,sizeof($keys) - 1)));$parser->_80();$source .=PHP_EOL;$source .=$parser->_81();} $source .='}';return $this->_93($source);} public function _92(&$parent_scope){$defined=[];$index=0;while($index <sizeof($this->keys)){$key=$this->keys[$index];$value=$this->values[$index];if(array_key_exists($key,$defined)){throw new _91(_2::message('SCO050',[$key]));} $value->_92($parent_scope);$defined[$key]=true;$index++;}} public function _94(){$properties=[];for($i=0,$size=sizeof($this->keys);$i <$size;$i++){$properties[$this->keys[$i]]=$this->values[$i]->_94();} return new _64($properties);}}class NilExpr extends _18{public function _85(_19 $_){return $this->_93('nil');} public function _92(&$parent_scope){} public function _94(){return new _66(_68::T_NIL);}}class PartialFuncExpr extends _18{public $operator;public $right;public function __construct($operator,$right=null){$this->operator=$operator;$this->right=$right;} public function _85(_19 $parser){$source='&(';$source .=_6::_12($this->operator);if(null !==$this->right){$source .=' ';$source .=$this->right->_85($parser);} $source .=')';return $this->_93($source);} public function _92(&$parent_scope){$this->right->_92($parent_scope);}}class _50 extends _18{public $expr;public $clauses;public function __construct(_18 $expr,$clauses){$this->expr=$expr;$this->clauses=$clauses;} public function _85(_19 $parser){$first=true;$size=sizeof($this->clauses);$processed=0;$source=$this->expr->_85($parser);$source .=PHP_EOL;$parser->_79();$source .=$parser->_81();$source .='where ';foreach($this->clauses as $clause){$key=&$clause[0];$value=&$clause[1];$processed++;if(!$first){$source .=$parser->_81();$source .='    , ';} else{$first=false;} $source .=$key;$source .=' :- ';$source .=$value->_85($parser);if($processed <$size){$source .=PHP_EOL;}} $parser->_80();return $this->_93($source);} public function _92(&$parent_scope){$this->scope=new _89($parent_scope);foreach($this->clauses as $clause){$key=&$clause[0];$value=&$clause[1];if($this->scope->hasLocal($key)){throw new _91(_2::message('SCO120',[$key]));} $value->_92($this->scope);$this->scope->insert($key,_90::K_VARIABLE |_90::K_INITIALIZED);} $this->expr->_92($this->scope);} public function _94(){foreach($this->clauses as $clause){$this->scope->_96(_95::M_TYPE,$clause[0],$clause[1]->_94());}  return $this->expr->_94();}}class BoolExpr extends _18{public $value;public function __construct($value){$this->value=$value;} public function _85(_19 $_){$source=var_export($this->value,true);return $this->_93($source);} public function _92(&$parent_scope){} public function _94(){return new _66(_68::T_BOOL);}}class PostfixExpr extends _18{public $left;public $operator;public function __construct($left,$operator){$this->left=$left;$this->operator=$operator;} public function _85(_19 $parser){$source=$this->left->_85($parser);$source .=_6::_12($this->operator);return $this->_93($source);} public function _92(&$parent_scope){$this->left->_92($parent_scope);} public function _94(){return new _66(_68::T_NIL);}}class _52 extends _18{public $value;public function __construct($value){$this->value=$value;} public function _85(_19 $parser){$source=$this->value;return $this->_93($source);} public function _92(&$parent_scope){} public function _94(){return new AtomType($this->value);}}class _53 extends _18{public $value;public function __construct($value){$this->value=$value;} public function _85(_19 $parser){$source=$this->value;return $source;} public function _92(&$parent_scope){} public function _94(){return new _66(_68::T_REGEX);}}class _34 extends _18{public $cases;public function __construct($cases){$this->cases=$cases;} public function _85(_19 $parser){$source='when';$source .=PHP_EOL;$parser->_79();for($i=0,$l=sizeof($this->cases);$i <$l;$i++){$obj=$this->cases[$i];$source .=$parser->_81();if(null !==$obj->condition){$source .=$obj->condition->_85($parser);$source .=' -> ';} else{$source .='else ';} $source .=$obj->action->_85($parser);if($i + 1 !==$l){$source .=',';$source .=PHP_EOL;}} $parser->_80();$source .=PHP_EOL;$source .=$parser->_81();$source .='end';return $this->_93($source);} public function _92(&$parent_scope){foreach($this->cases as $case){if(null !==$case->condition){$case->condition->_92($parent_scope);} $case->action->_92($parent_scope);}} public function _94(){$conds=0;$type=null;foreach($this->cases as $case){$conds++;if(null !==$case->condition){$condition_type=$case->condition->_94();if(!$condition_type->_98()){throw new _97(_2::message('TYP200',[$conds,$condition_type]));}} $action_type=$case->action->_94();if(null ===$type){$type=$action_type;} else if(!$type->check($action_type)){throw new _97(_2::message('TYP210',[$type,$conds,$action_type]));}} return $type;}}class NameExpr extends _18{public $name;public function __construct($name){$this->name=$name;} public function _85(_19 $parser){$source=$this->name;return $this->_93($source);} public function _92(&$parent_scope){$this->scope=$parent_scope;$symbol=$parent_scope->lookup($this->name);if(null ===$symbol){throw new _91(_2::message('SCO020',[$this->name]));}      $refcount=$parent_scope->_99(_95::M_REF_COUNT,$this->name);if(null ===$refcount){$parent_scope->_96(_95::M_REF_COUNT,$this->name,1);} else{$parent_scope->_96(_95::M_REF_COUNT,$this->name,$refcount + 1);}} public function _94(){$symbol=$this->scope->lookup($this->name);if($symbol & _90::K_VARIABLE){$variable_scope=$this->scope->getSymbolScope($this->name);return $variable_scope->_99(_95::M_TYPE,$this->name);} throw new _97(_2::message('TYP190',[$this->name]));}}class _49 extends _18{public $callee;public $arguments;public function __construct($callee,$arguments){$this->callee=$callee;$this->arguments=$arguments;} public function _85(_19 $parser){$source=$this->callee->_85($parser);$source .='(';$source .=implode(', ',array_map(function(_18 $arg) use($parser){return $arg->_85($parser);},$this->arguments));$source .=')';return $this->_93($source);} public function _92(&$parent_scope){$this->callee->_92($parent_scope);foreach($this->arguments as $arg){$arg->_92($parent_scope);}} public function _94(){$callee_type=$this->callee->_94();if(!($callee_type instanceof _70)){throw new _97(_2::message('TYP310',[$callee_type]));}  $expected_arguments=sizeof($callee_type->parameters);$received_arguments=sizeof($this->arguments);if($received_arguments !==$expected_arguments){throw new _97(_2::message('TYP320',[$callee_type,$expected_arguments,$received_arguments]));}  for($i=0;$i <$expected_arguments;$i++){$expected_type=$callee_type->parameters[$i];$received_type=$this->arguments[$i]->_94();if(!$expected_type->check($received_type)){throw new _97(_2::message('TYP330',[$i + 1,$expected_type,$received_type]));}} return $callee_type->return;}}class _43 extends _18{public $left;public $operator;public $right;public function __construct(_18 $left,$operator,$right){$this->left=$left;$this->operator=$operator;$this->right=$right;} private function isMemberAccess(){return '.' ===$this->operator;} public function _85(_19 $parser){$blanks=$this->isMemberAccess() ?'' :' ';$source=$this->left->_85($parser);$source .=$blanks;$source .=_6::_12($this->operator);$source .=$blanks;$source .=$this->isMemberAccess() ?$this->right :$this->right->_85($parser);return $this->_93($source);} public function _92(&$parent_scope){$this->scope=&$parent_scope;$this->left->_92($parent_scope);if(!$this->isMemberAccess()){$this->right->_92($parent_scope);} if(':-' ===$this->operator){if($this->left instanceof NameExpr){$symbol=$parent_scope->lookup($this->left->name);if(~$symbol & _90::K_VARIABLE){throw new _91(_2::message('SCO070',[$this->left->name]));}  if(~$symbol & _90::K_MUTABLE){throw new _91(_2::message('SCO080',[$this->left->name]));}} else{$valid_assignment=$this->left instanceof AccessExpr ||$this->left instanceof _45;if(!$valid_assignment){throw new _91(_2::message('SCO090',[]));}   if($this->left instanceof _45){foreach($this->left->items as $item){if(!($item instanceof NameExpr)){throw new _91(_2::message('SCO100',[]));}}}}}} public function _94(){$type=(object) [ 'left' =>$this->left->_94(),'right' =>'string' ===gettype($this->right) ?$this->right :$this->right->_94() ];$op_name=_6::_12($this->operator);if('.' ===$this->operator){if($type->left instanceof _64 && isset($type->left->properties[$this->right])){return $type->left->properties[$this->right];} throw new _97(_2::message('TYP090',[$type->left,$type->right]));}   if(':-' ===$this->operator){if(!$type->left->check($type->right)){$target=$this->left instanceof NameExpr ?"`{$this->left->name}' :: {$type->left}" :$type->right;throw new _97(_2::message('TYP100',[$type->right,$target]));} return $type->left;}  $numeric_op=['+','-','*','**','/','>>','<<',_6::T_MOD];if(in_array($this->operator,$numeric_op,true)){if('+' ===$this->operator && $type->left->_100() && $type->right->_100()){return new _66(_68::T_STR);} if($type->left->_101() && $type->right->_101()){return new _66(_68::T_NUMBER);} throw new _97(_2::message('TYP110',[$op_name,$type->left,$op_name,$type->right]));}  $eq_op=['=','<>','>','>=','<','<='];if(in_array($this->operator,$eq_op,true)){if(!$type->left->check($type->right)){throw new _97(_2::message('TYP130',[$type->left,$op_name,$type->right]));} return new _66(_68::T_BOOL);}  if('=~' ===$this->operator){if(!$type->left->_100() ||!$type->right->isRegex()){throw new _97(_2::message('TYP110',[$op_name,$type->left,$op_name,$type->right]));} return new _66(_68::T_BOOL);}  $bool_op=[_6::T_AND,_6::T_OR,_6::T_XOR];if(in_array($this->operator,$bool_op,true)){if($type->left->_98() && $type->right->_98()){return new _66(_68::T_BOOL);} if($type->left->_101() && $type->right->_101()){return new _66(_68::T_NUMBER);} throw new _97(_2::message('TYP110',[$op_name,$type->left,$op_name,$type->right]));}}}class LambdaExpr extends _18{public $parameters;public $kind;public $body;public $has_brackets;private $argument_types;public function __construct($parameters,$kind,$body,$has_brackets){$this->parameters=$parameters;$this->kind=$kind;$this->body=$body;$this->has_brackets=$has_brackets;$this->argument_types=[];} public function _85(_19 $parser){$source='&';switch(sizeof($this->parameters)){case 0:$source .='[]';break;case 1:if($this->has_brackets){$source .='[' .$this->parameters[0]->name;if(isset($this->parameters[0]->type)){$source .=' :: ' .$this->parameters[0]->type;} $source .=']';} else{$source .=$this->parameters[0]->name;} break;default:$source .='[';$source .=implode(', ',array_map(function($param){$parameter=$param->name;if(null !==$param->type){$parameter .=" :: {$param->type}";} return $parameter;},$this->parameters));$source .=']';} $source .=' -> ';if(_39::_40 ===$this->kind){$source .=$this->body->_85($parser);} else{$source .='begin' .PHP_EOL;$parser->_79();foreach($this->body as $stmt){$source .=$parser->_81();$source .=$stmt->_85($parser);} $parser->_80();$source .=$parser->_81();$source .='end';$source .=PHP_EOL;} return $this->_93($source);} public function _92(&$parent_scope){$this->scope=new _89($parent_scope);foreach($this->parameters as $param){if($this->scope->hasLocal($param->name)){throw new _91(_2::message('SCO010',[$param->name]));} $this->scope->insert($param->name,_90::K_INITIALIZED |_90::K_VARIABLE |_90::K_PARAMETER |_90::K_MUTABLE);$param_type=isset($param->type) ?$param->type :new _67(_95::nextGenericVarName());$this->argument_types[$param->name]=$param_type;$this->scope->_96(_95::M_TYPE,$param->name,$param_type);} if(_39::_41 ===$this->kind){foreach($this->body as $node){$node->_92($this->scope);}} else{$this->body->_92($this->scope);}} public function _94(){if(_39::_40 ===$this->kind){return new _70(array_map(function($parameter){return $this->argument_types[$parameter->name];},$this->parameters),$this->body->_94());}  return null;}}class _57 extends _18{public $body;public function __construct($body){$this->body=$body;} public function _85(_19 $parser){$source='&{';if(sizeof($this->body->stmt_list) >0){$source .=PHP_EOL;$parser->_79();$source .=$this->body->_85($parser);$parser->_80();$source .=$parser->_81();} $source .='}';return $this->_93($source);} public function _92(&$parent_scope){$this->scope=new _89($parent_scope);foreach($this->body->stmt_list as $node){$node->_92($this->scope);}} public function _94(){return new _66(_68::T_BLOCK);}}class _45 extends _18{public $items;public function __construct($items){$this->items=$items;} public function _85(_19 $parser){$source='{';if(sizeof($this->items) >0){$source .=' ';$source .=implode(', ',array_map(function($item) use($parser){return $item->_85($parser);},$this->items));$source .=' ';} $source .='}';return $this->_93($source);} public function _92(&$parent_scope){foreach($this->items as $item){$item->_92($parent_scope);}} public function _94(){if(0 ===sizeof($this->items)){return new _65(new _67(_95::nextGenericVarName()));}  $subtype=$this->items[0]->_94();foreach(array_slice($this->items,1) as $item){$type=$item->_94();if(!$subtype->check($type)){throw new _97(_2::message('TYP020',[$type,$subtype]));}} return new _65($subtype);}}class RangeExpr extends _18{public $from;public $to;public $by;public function __construct($from,$to,$by){$this->from=$from;$this->to=$to;$this->by=$by;} public function _85(_19 $parser){$source=$this->from->_85($parser);$source .=' .. ';$source .=$this->to->_85($parser);if(null !==$this->by){$source .=' by ';$source .=$this->by->_85($parser);} return $this->_93($source);} public function _92(&$parent_scope){$this->from->_92($parent_scope);$this->to->_92($parent_scope);if(null !==$this->by){$this->by->_92($parent_scope);}} public function _94(){$type=(object) [ 'from' =>$this->from->_94(),'to' =>$this->to->_94(),'by' =>null !==$this->by ?$this->by->_94() :null ];$throw_error_on=function($operand,$got){throw new _97(_2::message('TYP220',[$operand,$got]));};if(!$type->from->_101()){$throw_error_on('from',$type->from);} if(!$type->to->_101()){$throw_error_on('to',$type->to);} if(null !==$type->by && !$type->by->_101()){$throw_error_on('by',$type->by);} return new _65(new _66(_68::T_NUMBER));}}class PrefixExpr extends _18{private $operator;private $right;public function __construct(_10 $operator,_18 $right){$this->operator=$operator->_7();$this->right=$right;} public function _85(_19 $parser){$source=_6::T_NOT ===$this->operator ?'not ' :$this->operator;$source .=$this->right->_85($parser);return $this->_93($source);} public function _92(&$parent_scope){$this->right->_92($parent_scope);} public function _94(){$right_type=$this->right->_94();$op_name=_6::_12($this->operator);$type_error=new _97(_2::message('TYP230',[$op_name,$right_type]));switch($this->operator){case '+':case '-':case '~':if($right_type->_101()){return $right_type;} throw $type_error;case _6::T_NOT:if($right_type->_98()){return $right_type;} throw $type_error;}}}class MapExpr extends _18{public $keys;public $values;public function __construct($keys,$values){$this->keys=$keys;$this->values=$values;} public function _85(_19 $parser){$source='#{';$keys=&$this->keys;$values=&$this->values;if(sizeof($this->keys) >0){$source .=' ';$source .=implode(', ',array_map(function($index) use(&$keys,&$values,$parser){$subsource=$keys[$index]->_85($parser);$subsource .=': ';$subsource .=$values[$index]->_85($parser);return $subsource;},range(0,sizeof($keys) - 1)));$source .=' ';} $source .='}';return $this->_93($source);} public function _92(&$parent_scope){foreach($this->keys as $key){$key->_92($parent_scope);} foreach($this->values as $value){$value->_92($parent_scope);}} public function _94(){$size=sizeof($this->keys);if(0 ===$size){return new _73( new _67(_95::nextGenericVarName()),new _67(_95::nextGenericVarName()));} $original_key_type=$this->keys[0]->_94();$original_value_type=$this->values[0]->_94();for($i=1;$i <$size;$i++){$key_type=$this->keys[$i]->_94();$value_type=$this->values[$i]->_94();if(!$original_key_type->check($key_type)){throw new _97(_2::message('TYP070',[$i,$original_key_type,$key_type]));} if(!$original_value_type->check($value_type)){throw new _97(_2::message('TYP080',[$i,$original_value_type,$value_type]));}} return new _73($original_key_type,$original_value_type);}}class _51 extends _18{public $value;public $type;public $notation;public function __construct($value,$type,$notation='decimal'){$this->value=$value;$this->type=$type;$this->notation=$notation;} public function _85(_19 $parser){$source=$this->value;return $this->_93($source);} public function _92(&$parent_scope){} public function _94(){return new _66(_68::T_NUMBER);}}class AccessExpr extends _18{public $left;public $index;public function __construct($left,$index){$this->left=$left;$this->index=$index;} public function _85(_19 $parser){$source=$this->left->_85($parser);$source .=' {';$source .=$this->index->_85($parser);$source .='}';return $this->_93($source);} public function _92(&$parent_scope){$this->left->_92($parent_scope);$this->index->_92($parent_scope);} public function _94(){$left_type=$this->left->_94();$index_type=$this->index->_94();if($left_type instanceof _65){if(!$index_type->_101()){throw new _97(_2::message('TYP040',[$index_type]));}  return $left_type->type;}  if($left_type instanceof _73){if(!$index_type->check($left_type->key)){throw new _97(_2::message('TYP050',[$left_type->key,$index_type]));}  return $left_type->value;}  if($left_type->_100()){if(!$index_type->_101()){throw new _97(_2::message('TYP040',[$index_type]));}  return $left_type;} throw new _97(_2::message('TYP060',[$left_type]));}}class _46 extends _18{public $condition;public $then;public $else;public function __construct($condition,$then,$else){$this->condition=$condition;$this->then=$then;$this->else=$else;} public function _85(_19 $parser){$source=$this->condition->_85($parser);$source .=' then ';$source .=$this->then->_85($parser);$source .=' else ';$source .=$this->else->_85($parser);return $source;} public function _92(&$parent_scope){$this->condition->_92($parent_scope);$this->then->_92($parent_scope);$this->else->_92($parent_scope);} public function _94(){$condition=$this->condition->_94();if(!$condition->_98()){throw new _97(_2::message('TYP240',[$condition_type]));} $truthy=$this->then->_94();$falsy=$this->else->_94();if(!$truthy->check($falsy)){throw new _97(_2::message('TYP250',[$truthy,$falsy]));} return $truthy;}}class _37 extends _18{public $value;public $delimiter;public function __construct($value,$delimiter){$this->value=$value;$this->delimiter=$delimiter;} public function _85(_19 $parser){$source=$this->delimiter;$source .=$this->value;$source .=$this->delimiter;return $this->_93($source);} public function _92(&$parent_scope){} public function _94(){return new _66(_68::T_STR);}}} namespace _0\_17\_18\JSX{ use \_0\_17\_18\_18;use \_0\_17\_18\_37;use \_0\_17\_63\AtomType;use \_0\_17\_63\_66;use \_0\_17\_63\_64;use \_0\_1\_2;use \_0\_19\_19;use \_0\_63\_68;use \_0\_63\_97;class JSXElement extends _18{public $name;public $attributes;public $children;public function __construct($name,$attributes,$children=null){$this->name=$name;$this->attributes=$attributes;$this->children=$children;} public function _85(_19 $parser){$attributes=empty($this->attributes) ?'' :' ';$attributes .=implode(' ',array_map(function($attr) use($parser){$source=$attr[0];if(isset($attr[1])){$source .=': ';if($attr[1] instanceof _37){$source .=$attr[1]->_85($parser);} else{$source .="{ {$attr[1]->_85($parser)} }";}} return $source;},$this->attributes));if(null ===$this->children){return $this->_93("<{$this->name}{$attributes} />");} $parenthesized=$this->parentheses_level >0;$source='';if($parenthesized){$parser->_79();$source .=PHP_EOL .$parser->_81();} $source .="<{$this->name}{$attributes}>" .PHP_EOL;$parser->_79();foreach($this->children as $child){$source .=$parser->_81();if($child instanceof JSXElement){$source .=$child->_85($parser);} else{$source .="{ {$child->_85($parser)} }";} $source .=PHP_EOL;} $parser->_80();$source .=$parser->_81() ."</{$this->name}>";if($parenthesized){$source .=PHP_EOL;$parser->_80();} return $this->_93($source);} public function _92(&$parent_scope){foreach($this->attributes as $attr){if(isset($attr[1])){$attr[1]->_92($parent_scope);}} if(null ===$this->children){return;} foreach($this->children as $child){$child->_92($parent_scope);}} public function _94(){foreach($this->attributes as $attr){$name=$attr[0];$type=isset($attr[1]) ?$attr[1]->_94() :new _66(_68::T_BOOL);} if(null ===$this->children){return new AtomType(':jsx_element');} foreach($this->children as $child){$type=$child->_94();if(!$type->_100() && !$type->isAtom(':jsx_element')){throw new _97(_2::message('TYP410',[$type]));}} return new AtomType(':jsx_element');}}} namespace _0\_17\_58{ use \_0\_17\Node;use \_0\_19\_19;use \_0\_1\_2;use \_0\_89\_90;use \_0\_89\_95;use \_0\_89\_91;use \_0\_89\_89;use \_0\_17\_63\_70;use \_0\_63\_97;use \_0\_17\_58\BlockStmt;use \_0\_63\_68;use \_0\_17\_63\_65;use \_0\_17\_63\_66;use \_0\_17\_63\_73;use \_0\_17\_18\_18;use \_0\_3\_6;use \_0\_17\_63\_67;use \Exception;use \_0\_89\Symbol;abstract class _58 extends Node{}class RaiseStmt extends _58{public $expression;public function __construct($expression){$this->expression=$expression;} public function _85(_19 $parser){$source='raise ';$source .=$this->expression->_85($parser);$source .=PHP_EOL;return $source;} public function _92(&$parent_scope){$this->expression->_92($parent_scope);}}class _59 extends _58{public $stmt_list;public function __construct($stmt_list){$this->stmt_list=$stmt_list;} public function _85(_19 $parser){$source='';foreach($this->stmt_list as $stmt){$source .=$parser->_81();$source .=$stmt->_85($parser);} return $source;} public function _92(&$parent_scope){} public function _102(){foreach($this->stmt_list as $stmt){$stmt->_102();}}}class BreakStmt extends _58{public $label;public $is_explicit;public function __construct($label=null){$this->label=$label;$this->is_explicit=null !==$label;} public function _85(_19 $parser){$source='break';if($this->is_explicit){$source .=' ';$source .=$this->label;} $source .=PHP_EOL;return $source;} public function _92(&$parent_scope){if(!$this->is_explicit){$label=$parent_scope->getMetaInContext(_95::M_LABEL);if(null ===$label){throw new _91(_2::message('SCO140',['break']));}} else{$meta_label=$parent_scope->getMetaInContext(_95::M_LABEL);if(null ===$meta_label){throw new _91(_2::message('SCO140',['break']));} $label=$parent_scope->lookup($this->label);if(null ===$label){throw new _91(_2::message('SCO150',['break',$this->label]));}  if(~$label & _90::K_LABEL){throw new _91(_2::message('SCO160',['break',$this->label]));} $refcount=$parent_scope->_99(_95::M_REF_COUNT,$this->label);if(null ===$refcount){$parent_scope->_96(_95::M_REF_COUNT,$this->label,1);} else{$parent_scope->_96(_95::M_REF_COUNT,$this->label,$refcount + 1);}}} public function _102(){}}class TryStmt extends _58{public $try;public $rescues;public $finally;public function __construct($try,$rescues,$finally){$this->try=$try;$this->rescues=$rescues;$this->finally=$finally;} public function _85(_19 $parser){$source='try';$source .=PHP_EOL;$parser->_79();$source .=$this->try->_85($parser);$parser->_80();foreach($this->rescues as $rescue){$obj=(object) $rescue;$source .=$parser->_81();$source .='rescue (';$source .=implode('.',$obj->exception_class);$source .=' ';$source .=$obj->variable;$source .=')';$source .=PHP_EOL;$parser->_79();$source .=$obj->body->_85($parser);$parser->_80();} if(null !==$this->finally){$source .=$parser->_81();$source .='finally';$source .=PHP_EOL;$parser->_79();$source .=$this->finally->_85($parser);$parser->_80();} $source .=$parser->_81();$source .='end';$source .=PHP_EOL;return $source;} public function _92(&$parent_scope){$this->try->scope=new _89($parent_scope);foreach($this->try->stmt_list as $node){$node->_92($this->try->scope);}  foreach(array_map(function($item){return (object) $item;},$this->rescues) as $rescue){$rescue->body->scope=new _89($parent_scope);$rescue->body->scope->insert($rescue->variable,_90::K_VARIABLE |_90::K_INITIALIZED);foreach($rescue->body->stmt_list as $node){$node->_92($rescue->body->scope);}}  if(null !==$this->finally){$this->finally->scope=new _89($parent_scope);foreach($this->finally->stmt_list as $node){$node->_92($this->finally->scope);}}} public function _102(){$this->try->_102();foreach(array_map(function($item){return (object) $item;},$this->rescues) as $rescue){$rescue->body->_102();} if(null !==$this->finally){$this->finally->_102();}}}class FnStmt extends _58{public $signature;public $body;public $is_method;public $is_short;public function __construct(_86 $signature,$body,$is_method,$is_short){$this->signature=$signature;$this->body=$body;$this->is_method=$is_method;$this->is_short=$is_short;$this->name=$this->signature->name;} public function _85(_19 $parser){$source=$this->is_method ?'' :'fn ';$source .=$this->signature->_85($parser);if($this->is_short){$source .=' :- ';$source .=$this->body->_85($parser);} else{$source .=PHP_EOL;$parser->_79();foreach($this->body as $stmt){$source .=$parser->_81();$source .=$stmt->_85($parser);} $parser->_80();$source .=$parser->_81();$source .='end';} $source .=PHP_EOL;return $source;} public function _92(&$parent_scope){$parent_scope->insert($this->signature->name,_90::K_VARIABLE |_90::K_FUNCTION);$this->scope=new _89($parent_scope);$this->signature->_92($this->scope);if($this->is_short){$this->body->_92($this->scope);} else{foreach($this->body as $node){$node->_92($this->scope);}}} public function _102(){$parameters_types=$this->signature->getParametersTypes();if(null !==$this->signature->type){$function_type=new _70($parameters_types,$this->signature->type);$this->scope->_96(_95::M_TYPE,$this->signature->name,$function_type);$this->injectParametersTypes($parameters_types);$body_type=$this->body->_94();if(!$this->signature->type->check($body_type)){throw new _97(_2::message('TYP380',[$this->signature->type,$body_type]));}} else{$this->injectParametersTypes($parameters_types);$body_type=$this->body->_94();$function_type=new _70($parameters_types,$body_type);$this->scope->_96(_95::M_TYPE,$this->signature->name,$function_type);}} private function injectParametersTypes($parameters_types){$size=sizeof($parameters_types);for($i=0;$i <$size;$i++){$parameter=$this->signature->parameters[$i]->name;$type=$parameters_types[$i];$this->scope->_96(_95::M_TYPE,$parameter,$type);}}}class ReturnStmt extends _58{public $expression;public function __construct($expression=null){$this->expression=$expression;} public function _85(_19 $parser){$source='^';if(null !==$this->expression){$source .=' ';$source .=$this->expression->_85($parser);} $source .=PHP_EOL;return $source;} public function _92(&$parent_scope){$this->expression->_92($parent_scope);}}class IfStmt extends _58{public $condition;public $body;public $elif;public $else;public function __construct($condition,$body,$elif,$else){$this->condition=$condition;$this->body=$body;$this->elif=$elif;$this->else=$else;} public function _85(_19 $parser){$source='if ';$source .=$this->condition->_85($parser);$source .=PHP_EOL;$parser->_79();$source .=$this->body->_85($parser);$parser->_80();foreach($this->elif as $elif){$source .=$elif->_85($parser);} if(null !==$this->else){$source .=$parser->_81();$source .='else';$source .=PHP_EOL;$parser->_79();$source .=$this->else->_85($parser);$parser->_80();} $source .=$parser->_81();$source .='end';$source .=PHP_EOL;return $source;} public function _92(&$parent_scope){$this->body->scope=new _89($parent_scope);$this->condition->_92($parent_scope);foreach($this->body->stmt_list as $node){$node->_92($this->body->scope);}   foreach($this->elif as $elif){$elif->_92($parent_scope);}  if(null !==$this->else){$this->else->scope=new _89($parent_scope);foreach($this->else->stmt_list as $node){$node->_92($this->else->scope);}}} public function _102(){$condition_type=$this->condition->_94();if(!$condition_type->_98()){throw new _97(_2::message('TYP140',[$condition_type]));} $this->body->_102();foreach($this->elif as $elif){$elif->_102();} if(null !==$this->else){$this->else->_102();}}}class ForeachStmt extends _58{public $key;public $alias;public $generator;public $body;public function __construct($key,$alias,$generator,$body){$this->key=$key;$this->alias=$alias;$this->generator=$generator;$this->body=$body;} public function _85(_19 $parser){$source='foreach ';if(null !==$this->key){$source .=$this->key;$source .=': ';} $source .=$this->alias;$source .=' in ';$source .=$this->generator->_85($parser);$source .=PHP_EOL;$parser->_79();foreach($this->body as $stmt){$source .=$parser->_81();$source .=$stmt->_85($parser);} $parser->_80();$source .=$parser->_81();$source .='end';$source .=PHP_EOL;return $source;} public function _92(&$parent_scope){$this->scope=new _89($parent_scope);$this->scope->setMetaInContext(_95::M_LABEL,_95::nextMetaLabel());if(null !==$this->key){$this->scope->insert($this->key,_90::K_VARIABLE |_90::K_INITIALIZED);} if($this->key ===$this->alias){throw new _91(_2::message('SCO180',[$this->alias]));} $this->scope->insert($this->alias,_90::K_VARIABLE |_90::K_INITIALIZED |_90::K_MUTABLE);$this->generator->_92($parent_scope);foreach($this->body as $node){$node->_92($this->scope);}} public function _102(){$generator_type=$this->generator->_94();if(!$generator_type->isIterable()){throw new _97(_2::message('TYP260',[$generator_type]));} if(null !==$this->key){$key_type=$generator_type instanceof _65 ?new _66(_68::T_NUMBER) :$generator_type->key;$this->scope->_96(_95::M_TYPE,$this->key,$key_type);} $value_type=$generator_type instanceof _65 ?$generator_type->type :$generator_type->key;foreach($this->body as $stmt){$stmt->_102();}}}class _87 extends _58{public $name;public $type;public $value;public $mutable;private $scope;public function __construct($name,$type,$value,$mutable){$this->name=$name;$this->type=$type;$this->value=$value;$this->mutable=$mutable;} public function _85(_19 $parser){$source='let ';if($this->mutable){$source .='mut ';} $source .=$this->name;if(null !==$this->type){$source .=' :: ' .$this->type;} if(null !==$this->value){$source .=' :- ' .$this->value->_85($parser);} $source .=PHP_EOL;return $source;} public function _92(&$parent_scope){$this->scope=$parent_scope;$mask=_90::K_VARIABLE |($this->mutable ?_90::K_MUTABLE :0x0);if(null ===$this->value){$this->scope->insert($this->name,$mask);} else{$this->scope->insert($this->name,$mask |_90::K_INITIALIZED);$this->value->_92($parent_scope);}} public function _102(){if(null ===$this->type && null ===$this->value){throw new _97(_2::message('TYP290',[$this->name]));} if($this->mutable){$this->checkMutable();} else{$this->checkImmutable();}} public function checkMutable(){if(null ===$this->value){$this->type->simplify();$this->scope->_96(_95::M_TYPE,$this->name,$this->type);return;}  if(null ===$this->type){$inferred_type=$this->value->_94();$this->scope->_96(_95::M_TYPE,$this->name,$inferred_type);return;}  $this->checkTypeAndValue();} public function checkImmutable(){if(null ===$this->value){throw new _97(_2::message('TYP270',[$this->name .' :: ' .$this->type]));}  if(null ===$this->type){$type=$this->value->_94();$this->scope->_96(_95::M_TYPE,$this->name,$type);return;} $this->checkTypeAndValue();} public function checkTypeAndValue(){$this->scope->_96(_95::M_TYPE,$this->name,$this->type);$inferred_type=$this->value->_94();if(!$this->type->check($inferred_type)){throw new _97(_2::message('TYP300',[ $this->name,$this->type,$inferred_type ]));}}}class SwitchStmt extends _58{public $value;public $cases;public function __construct($value,$cases){$this->value=$value;$this->cases=$cases;} public function _85(_19 $parser){$source='switch ';$source .=$this->value->_85($parser);$source .=PHP_EOL;$parser->_79();foreach($this->cases as $case){$source .=$parser->_81();$source .=$case->_85($parser);} $parser->_80();$source .=$parser->_81();$source .='end';$source .=PHP_EOL;return $source;} public function _92(&$parent_scope){$this->value->_92($parent_scope);foreach($this->cases as $case){$case->_92($parent_scope);}} public function _102(){$value_type=$this->value->_94();$else_counter=0;foreach($this->cases as $case){if(!$case->is_else){$case_type=$case->value->_94();if(!$value_type->check($case_type)){throw new _97(_2::message('TYP150',[$value_type,$case_type]));}} else{$else_counter++;}} if($else_counter >1){throw new _97(_2::message('TYP160',[]));} foreach($this->cases as $case){$case->_102();}}}class ExprStmt extends _58{public $expr;public function __construct($expr){$this->expr=$expr;} public function _85(_19 $parser){return 'do ' .$this->expr->_85($parser) .PHP_EOL;} public function _92(&$parent_scope){$this->expr->_92($parent_scope);} public function _102(){$type=$this->expr->_94();var_dump((string) $type);}}class _88 extends _58{public $stmt;public $predicate;public $tag;public function __construct(_58 $stmt,_18 $predicate,$tag){$this->stmt=$stmt;$this->predicate=$predicate;$this->tag=$tag;} public function _85(_19 $parser){$source=rtrim($this->stmt->_85($parser),PHP_EOL);$source .=_6::T_WHEN ===$this->tag ?' when ' :' unless ';$source .=$this->predicate->_85($parser);$source .=PHP_EOL;return $source;} public function _92(&$parent_scope){$this->scope=new _89($parent_scope);$this->predicate->_92($parent_scope);$this->stmt->_92($this->scope);} public function _102(){$condition_type=$this->predicate->_94();if(!$condition_type->_98()){throw new _97(_2::message('TYP030',[$condition_type]));}}}class CaseStmt extends _58{public $value;public $body;public $is_else;public function __construct($value,$body,$is_else=false){$this->value=$value;$this->body=$body;$this->is_else=$is_else;} public function _85(_19 $parser){$source=$this->is_else ?'else' :'case ' .$this->value->_85($parser);$source .=PHP_EOL;$parser->_79();$source .=$this->body->_85($parser);$parser->_80();return $source;} public function _92(&$parent_scope){$this->scope=new _89($parent_scope);if(!$this->is_else){$this->value->_92($parent_scope);} foreach($this->body->stmt_list as $node){$node->_92($this->scope);}} public function _102(){$this->body->_102();}}class _86 extends _58{public $name;public $parameters;public $type;public function __construct($name,$parameters,$type){$this->name=$name;$this->parameters=$parameters;$this->type=$type;} public function _85(_19 $parser){$source=$this->name .'(';$source .=implode(', ',array_map(function($param){$parameter=$param->name;if(null !==$param->type){$parameter .=' :: ' .$param->type;} return $parameter;},$this->parameters));$source .=')';if(!is_null($this->type)){$source .=' -> ' .$this->type;} return $source;} public function _92(&$parent_scope){foreach($this->parameters as $param){if($parent_scope->hasLocal($param->name)){throw new _91(_2::message('SCO060',[$param->name,$this->name]));}  $parent_scope->insert($param->name,_90::K_INITIALIZED |_90::K_MUTABLE |_90::K_VARIABLE |_90::K_PARAMETER);}} public function getParametersTypes(){return array_map(function($parameter){return null ===$parameter->type ?new _67(_95::nextGenericVarName()) :$parameter->type;},$this->parameters);} public function _102(){}}class WhileStmt extends _58{public $condition;public $body;public function __construct($condition,$body){$this->condition=$condition;$this->body=$body;} public function _85(_19 $parser){$source='while ';$source .=$this->condition->_85($parser);$source .=PHP_EOL;$parser->_79();foreach($this->body as $stmt){$source .=$parser->_81();$source .=$stmt->_85($parser);} $parser->_80();$source .=$parser->_81();$source .='end' .PHP_EOL;return $source;} public function _92(&$parent_scope){$this->scope=new _89($parent_scope);$this->scope->setMetaInContext(_95::M_LABEL,_95::nextMetaLabel());$this->condition->_92($parent_scope);foreach($this->body as $node){$node->_92($this->scope);}} public function _102(){$condition_type=$this->condition->_94();if(!$condition_type->_98()){throw new _97(_2::message('TYP010',[$condition_type]));} foreach($this->body as $node){$node->_102();}}}class LabelStmt extends _58{public $name;public $stmt;public function __construct($name,$stmt){$this->name=$name;$this->stmt=$stmt;} public function _85(_19 $parser){$source='[' .$this->name .']';$source .=PHP_EOL;$source .=$parser->_81();$source .=$this->stmt->_85($parser);return $source;} public function _92(&$parent_scope){$this->scope=new _89($parent_scope);$this->scope->insert($this->name,_90::K_LABEL);$this->stmt->_92($this->scope);} public function _102(){$this->stmt->_102();}}class ProgramStmt extends _58{public $stmt_list;public function __construct($stmt_list){$this->stmt_list=$stmt_list;} public function _85(_19 $parser){$source='';foreach($this->stmt_list as $stmt){$source .=$stmt->_85($parser);} return $source;} public function _92(&$parent_scope){$this->scope=new _89($parent_scope);foreach($this->stmt_list as $node){$node->_92($this->scope);}} public function _102(){foreach($this->stmt_list as $node){$node->_102();}} public function attachValidAST($ast){$safe_scope=clone $this->scope;try{foreach($ast->stmt_list as $node){$node->_92($this->scope);} foreach($ast->stmt_list as $node){$node->_102();} $this->stmt_list=array_merge($this->stmt_list,$ast->stmt_list);} catch(\Exception $e){$this->scope=$safe_scope;throw $e;}}}class ContinueStmt extends _58{public $label;public $is_explicit;public function __construct($label=null){$this->label=$label;$this->is_explicit=null !==$label;} public function _85(_19 $parser){$source='continue';if($this->is_explicit){$source .=' ';$source .=$this->label;} $source .=PHP_EOL;return $source;} public function _92(&$parent_scope){if(!$this->is_explicit){$label=$parent_scope->getMetaInContext(_95::M_LABEL);if(null ===$label){throw new _91(_2::message('SCO140',['continue']));}} else{$meta_label=$parent_scope->getMetaInContext(_95::M_LABEL);if(null ===$meta_label){throw new _91(_2::message('SCO140',['continue']));} $label=$parent_scope->lookup($this->label);if(null ===$label){throw new _91(_2::message('SCO150',['continue',$this->label]));}  if(~$label & _90::K_LABEL){throw new _91(_2::message('SCO160',['continue',$this->label]));} $refcount=$parent_scope->_99(_95::M_REF_COUNT,$this->label);if(null ===$refcount){$parent_scope->_96(_95::M_REF_COUNT,$this->label,1);} else{$parent_scope->_96(_95::M_REF_COUNT,$this->label,$refcount + 1);}}} public function _102(){}}class BlockStmt extends _58{public $stmt_list;public function __construct($stmt_list){$this->stmt_list=$stmt_list;} public function _85(_19 $parser){$source='begin';$source .=PHP_EOL;$parser->_79();foreach($this->stmt_list as $stmt){$source .=$parser->_81();$source .=$stmt->_85($parser);} $parser->_80();$source .=$parser->_81();$source .='end';$source .=PHP_EOL;return $source;} public function _92(&$parent_scope){$this->scope=new _89($parent_scope);foreach($this->stmt_list as $node){$node->_92($this->scope);}} public function _102(){foreach($this->stmt_list as $stmt){$stmt->_102();}}}class ForStmt extends _58{public $variable;public $from;public $to;public $by;public $body;public function __construct($variable,$from,$to,$by,$body){$this->variable=$variable;$this->from=$from;$this->to=$to;$this->by=$by;$this->body=$body;} public function _85(_19 $parser){$source='for ';$source .=$this->variable;$source .=' from ';$source .=$this->from->_85($parser);$source .=' to ';$source .=$this->to->_85($parser);if(null !==$this->by){$source .=' by ';$source .=$this->by->_85($parser);} $source .=PHP_EOL;$parser->_79();$source .=$this->body->_85($parser);$parser->_80();$source .=$parser->_81();$source .='end';$source .=PHP_EOL;return $source;} public function _92(&$parent_scope){$this->scope=new _89($parent_scope);$this->scope->setMetaInContext(_95::M_LABEL,_95::nextMetaLabel());$this->scope->insert($this->variable,_90::K_VARIABLE |_90::K_MUTABLE |_90::K_INITIALIZED);$this->from->_92($parent_scope);$this->to->_92($parent_scope);if(null !==$this->by){$this->by->_92($parent_scope);} foreach($this->body->stmt_list as $node){$node->_92($this->scope);}} public function _102(){$keys=['from','to'];if(null !==$this->by){$keys[]='by';} foreach($keys as $key){$type=$this->{$key}->_94();if(!$type->_101()){throw new _97(_2::message('TYP170',[$key,$type]));}} $this->scope->_96(_95::M_TYPE,$this->variable,new _66(_68::T_NUMBER));$this->body->_102();}}class ElifStmt extends _58{public $condition;public $body;public function __construct($condition,$body){$this->condition=$condition;$this->body=$body;} public function _85(_19 $parser){$source=$parser->_81();$source .='elif ';$source .=$this->condition->_85($parser);$source .=PHP_EOL;$parser->_79();foreach($this->body as $stmt){$source .=$parser->_81();$source .=$stmt->_85($parser);} $parser->_80();return $source;} public function _92(&$parent_scope){$this->scope=new _89($parent_scope);$this->condition->_92($parent_scope);foreach($this->body as $node){$node->_92($this->scope);}} public function _102(){$condition_type=$this->condition->_94();if(!$condition_type->_98()){throw new _97(_2::message('TYP180',[$condition_type]));} foreach($this->body as $stmt){$stmt->_102();}}}} namespace _0\_17\_63{ use \_0\_63\_68;use \_0\_1\_2;use \_0\_63\_97;abstract class TypeNode{protected $parentheses_level=0;public function addParentheses(){$this->parentheses_level++;} public function removeParentheses(){$this->parentheses_level--;} protected function _93($source){$level=$this->parentheses_level;return str_repeat('(',$level) .$source .str_repeat(')',$level);} public function isAtom($atom){return $this instanceof AtomType && $this->name ===$atom;} public function _101(){return $this instanceof _66 && _68::T_NUMBER ===$this->code;} public function _100(){return $this instanceof _66 && _68::T_STR ===$this->code;} public function _98(){return $this instanceof _66 && _68::T_BOOL ===$this->code;} public function isRegex(){return $this instanceof _66 && _68::T_REGEX ===$this->code;} public function isIterable(){return $this instanceof _73 ||$this instanceof _65;} public function simplify(){return $this;} abstract function check(TypeNode $other);}class InstanceType extends TypeNode{public $qualified_name;public function __construct($qualified_name){$this->qualified_name=$qualified_name;} public function __toString(){return $this->_93('%' .join('.',$this->qualified_name));} public function check(TypeNode $other){return false;}}class _70 extends TypeNode{public $parameters;public $return;public function __construct($parameters,$return){$this->parameters=$parameters;$this->return=$return;} public function __toString(){return $this->_93( '&[' .join(', ',$this->parameters) .'] -> ' .$this->return );} public function check(TypeNode $other){$message=_2::message('TYP350',[$this,$other]);if(!($other instanceof _70)){return false;}  $self_arity=sizeof($this->parameters);$other_arity=sizeof($other->parameters);if($self_arity !==$other_arity){$message .='     > ' ._2::message('TYP360',[$self_arity,$other_arity]);throw new _97($message);}  for($i=0;$i <$self_arity;$i++){$self_type=$this->parameters[$i];$other_type=$other->parameters[$i];if(!$self_type->check($other_type)){$message .='     > ' ._2::message('TYP370',[$i + 1,$self_type,$other_type]);throw new _97($message);}}  if(!$this->return->check($other->return)){$message .='     > ' ._2::message('TYP380',[$this->return,$other->return]);throw new _97($message);} return true;}}class _65 extends TypeNode{public $type;public function __construct(TypeNode $type){$this->type=$type;} public function __toString(){return $this->_93('{' .$this->type .'}');} public function check(TypeNode $other){if(!($other instanceof _65)){return false;} return $this->type->check($other->type);}}class _73 extends TypeNode{public $key;public $value;public function __construct(TypeNode $key,TypeNode $value){$this->key=$key;$this->value=$value;} public function __toString(){return $this->_93( '#{' .$this->key .': ' .$this->value .'}' );} public function check(TypeNode $other){if(!($other instanceof _73)){return false;} $match_keys=$this->key->check($other->key);$match_values=$this->value->check($other->value);if(!$match_keys ||!$match_values){$message=_2::message('TYP350',[$this,$other]);if(!$match_keys){$message .='     > ' ._2::message('TYP340',['key',$this->key,$other->key]);} if(!$match_values){$message .=PHP_EOL .'     > ' ._2::message('TYP340',['value',$this->value,$other->value]);} throw new _97($message);} return true;}}class _64 extends TypeNode{public $properties;public function __construct($properties){$this->properties=$properties;} public function __toString(){$source='%{';$source .=implode(', ',array_map(function($name){return "{$name}: {$this->properties[$name]}";},array_keys($this->properties)));$source .='}';return $this->_93($source);} public function check(TypeNode $other){if(!($other instanceof _64)){return false;}  $different_properties=array_diff_key($this->properties,$other->properties);if(sizeof($different_properties) >0){return false;}  foreach(array_keys($this->properties) as $property){if(!$this->properties[$property]->check($other->properties[$property])){return false;}} return true;}}class _66 extends TypeNode{public $code;public function __construct($code){$this->code=$code;} public function __toString(){$map=[ _68::T_STR =>'string',_68::T_NUMBER =>'number',_68::T_BOOL =>'boolean',_68::T_REGEX =>'regex',_68::T_BLOCK =>'block',_68::T_UNIT =>'unit',_68::T_NIL =>'nil',_68::T_BYTE =>'byte',_68::T_ATOM =>'atom' ];return $this->_93( array_key_exists($this->code,$map) ?$map[$this->code] :'unknown' );} public function check(TypeNode $other){if(!($other instanceof _66)){return $other instanceof AtomType && _68::T_ATOM ===$this->code;} return $this->code ===$other->code;}}class AtomType extends TypeNode{public $name;public function __construct($name){$this->name=$name;} public function __toString(){return $this->_93($this->name);} public function check(TypeNode $other){if(!($other instanceof AtomType)){return false;} return $this->name ===$other->name;}}class _67 extends TypeNode{public $name;public function __construct($name){$this->name=$name;} public function __toString(){return $this->_93($this->name);} public function check(TypeNode $other){return false;}}class _72 extends TypeNode{public $types;public $size;public function __construct(...$types){$this->types=$types;$this->size=sizeof($types);} public function __toString(){return $this->_93('#(' .implode(', ',$this->types) .')');} public function check(TypeNode $other){return false;}}class _75 extends TypeNode{public $operator;public $left;public $right;public function __construct($left,$operator,$right){$this->left=$left;$this->operator=$operator;$this->right=$right;} public function __toString(){return $this->_93( $this->left ." {$this->operator} " .$this->right );} public function simplify(){if('&' !==$this->operator){return $this;} $simple_left=$this->left->simplify();$simple_right=$this->right->simplify();if($simple_left instanceof _64 && $simple_right instanceof _64){$properties=[];foreach($simple_left->properties as $name =>$type){$properties[$name]=$type;} foreach($simple_right->properties as $name =>$type){if(array_key_exists($name,$properties)){if(!$properties[$name]->check($type)){throw new _97(_2::message('TYP400',[$this->left,$this->right,$name,$properties[$name],$type]));}} else{$properties[$name]=$type;}} return new _64($properties);} throw new _97(_2::message('TYP390',[$this->left,$this->right]));} public function check(TypeNode $other){return $this->simplify()->check($other);}}} namespace _0\_89{ use \_0\_1\_2;use \_0\_89\_95;use \Exception;interface Membered{public function getMembers();}class _89{public $table=[];public $parent;public $meta=[];public function __construct(_89 $parent=null){$this->parent=$parent;} public function hasLocal($symbol){return array_key_exists($symbol,$this->table);} public function insert($symbol,$value){if($this->hasLocal($symbol)){throw new _91(_2::message('SCO130',[$symbol]));} $this->table[$symbol]=$value;} public function lookup($symbol){if($this->hasLocal($symbol)){return $this->table[$symbol];} return null !==$this->parent ?$this->parent->lookup($symbol) :null;} public function _96($property,$symbol,$value){$scope=$this->getSymbolScope($symbol);if(!array_key_exists($symbol,$scope->meta)){$scope->meta[$symbol]=[];} $scope->meta[$symbol][$property]=$value;} public function setMetaInContext($property,$value){$this->meta[$property]=$value;} public function _99($property,$symbol){$scope=$this->getSymbolScope($symbol);if(null ===$scope ||!array_key_exists($symbol,$scope->meta)){return null;} return array_key_exists($property,$scope->meta[$symbol]) ?$scope->meta[$symbol][$property] :null;} public function getMetaInContext($property){if(array_key_exists($property,$this->meta)){return $this->meta[$property];} return null !==$this->parent ?$this->parent->getMetaInContext($property) :null;} public function getSymbolScope($symbol){if($this->hasLocal($symbol)){return $this;} return null !==$this->parent ?$this->parent->getSymbolScope($symbol) :null;}}class _95{const M_REF_COUNT='refcount';const M_TYPE='type';const M_LABEL='label';private static $label_num=0;private static $generic_num=0;public static function nextMetaLabel(){return 'LB' .static::$label_num++;} public static function nextGenericVarName(){return 'A' .static::$generic_num++;}}class _90{const K_FUNCTION=1 <<0;const K_VARIABLE=1 <<1;const K_CLASS=1 <<4;const K_ENUM=1 <<5;const K_MUTABLE=1 <<6;const K_PARAMETER=1 <<7;const K_LABEL=1 <<8;const K_SPECIAL=1 <<9;const K_MEMBER=1 <<10;const K_INITIALIZED=1 <<11;}class _91 extends Exception{protected $message;public function __construct($message){$this->message=$message;} public function __toString(){return join([ BEGIN_RED,"*** Quack, there is a ",BEGIN_GREEN,"semantic",END_GREEN,BEGIN_RED," issue, friend!",PHP_EOL,"    ",$this->message,PHP_EOL,END_RED ]);}}} namespace _0\_63{ use \Exception;class _97 extends Exception{protected $message;public function __construct($message){$this->message=$message;} public function __toString(){return join([ BEGIN_RED,'**** Quack, I\'ve found a ',BEGIN_GREEN,'type error',END_GREEN,BEGIN_RED,', my dear!',PHP_EOL,'     ',$this->message,PHP_EOL,END_RED ]);}}class _68{const T_STR=0;const T_NUMBER=2;const T_BOOL=3;const T_OBJ=4;const T_MAP=5;const T_LIST=6;const T_ATOM=9;const T_REGEX=10;const T_LAZY=11;const T_BLOCK=12;const T_ENUM=13;const T_UNIT=14;const T_BYTE=15;const T_NIL=16;}} namespace Main{ use \_0\_3\_14;use \_0\_19\_77;use \_0\_19\_82;use \_0\_89\_89;define('BASE_PATH',__DIR__ .'/..');if(!extension_loaded('readline')){echo "Missing readline extension on PHP. Recompile with --with-readline";exit;} function isPOSIX(){static $value;if(null ===$value){$value=strtoupper(substr(PHP_OS,0,3)) !=='WIN';} return $value;} function session(){static $session;if(null ===$session){$session=(object) [ 'command' =>'','complete_stmt' =>true,'program_ast' =>null ];} return $session;} function start_repl(){$dot=isPOSIX() ?'·' :'-';echo "Quack {$dot} Copyright (C) 2016 Marcelo Camargo
This program comes with ABSOLUTELY NO WARRANTY.
This is free software, and you are welcome to redistribute it
under certain conditions; type 'show c' for details.\n
";echo "Use quack --help for more information",PHP_EOL;if(args_have('-h','--help')){open_repl_help();return;} repl();} function quack(){if(isPOSIX()){$wav=realpath(dirname(__FILE__) .'/../../resource/quack.wav');$player="afplay";if(`which aplay`){$player="aplay";} exec("$player $wav > /dev/null 2> /dev/null &");}} function install_stream_handler(){$prompt=session()->complete_stmt ?"Quack> " :"\__(\"> ";if(isPOSIX()){begin_yellow();readline_callback_handler_install($prompt,__NAMESPACE__ .'\\readline_callback');end_yellow();} else{echo "$prompt";}} function begin_yellow(){echo "\033[01;33m";} function end_yellow(){echo "\033[0m";} function print_entire_license(){echo file_get_contents(__DIR__ ."/../../LICENSE.md");} function readline_callback($command){$session=session();$command=trim($command);switch(trim($command)){case ':quit':case ':q':exit;case 'show c':print_entire_license();goto next;case '':goto next;case ':clear':$clear=isPOSIX() ?'clear' :'cls';system($clear);goto next;} $run_command=$session->complete_stmt ?$command :$session->command .' ' .$command;$lexer=new _14($run_command);$parser=new _82($lexer);try{$parser->_22();if(null ===$session->program_ast){$global_scope=new _89();$parser->ast->_92($global_scope);$parser->ast->_102();$session->program_ast=$parser->ast;} else{$session->program_ast->attachValidAST($parser->ast);} $session->complete_stmt=true;args_have('-f','--format') && $parser->_85();} catch(_77 $e){$session->command=$run_command;$session->complete_stmt=false;} catch(\Exception $e){$session->command='';$session->complete_stmt=true;echo $e;if(!args_have('--shut-up-duck')){quack();}} next:if(isPOSIX()){if('' ===$command){readline_on_new_line();} else{readline_add_history($command);}} install_stream_handler();} function repl(){$title="Quack interactive mode";if(isPOSIX()){fwrite(STDOUT,"\x1b]2;{$title}\x07");} else{`title {$title}`;} echo "Type ^C or :quit to leave",PHP_EOL;install_stream_handler();while(true){if(isPOSIX()){$write=null;$except=null;$stream=@stream_select($read=[STDIN],$write,$except,null);if($stream && in_array(STDIN,$read)){readline_callback_read_char();}} else{$line=stream_get_line(STDIN,1024,PHP_EOL);readline_callback($line);}}} function open_repl_help(){} function args_have(){global $argv;return count(array_intersect($argv,func_get_args())) >0;} start_repl();}