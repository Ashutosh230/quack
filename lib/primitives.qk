-- TODO: these should become type classes for parametric polymorphism
-- TODO: booleans should be ADTs
-- TODO: Deal with type recursion, such as Id :- Id

type Id :- &a -> a

type Functor :- %{
    fmap: &a -> b
}

type Show :- %{
    to_string: &[] -> string
}

type Eq :- %{
    eq: &a -> boolean,
    diff: &a -> boolean,
    max: Id,
    min: Id
}

type Ord :- %{
    lt: &a -> boolean,
    gt: &a -> boolean,
    lte: &a -> boolean,
    gte: &a -> boolean
}

type Enum :- %{
    succ: &[] -> a,
    pred: &[] -> a
}

type Monoid :- %{
    empty: &[] -> a,
    concat: Id
}

type Additive :- %{
    plus: Id
}

type Subtractive :- %{
    minus: Id
}

type Multiplicative :- %{
    multiply: Id
}

type Divisible :- %{
    divide: Id
}

type Primitive :- Show & Eq & Ord

type String :- Primitive & Monoid & Additive
type Number :- Primitive & Enum & Monoid & Additive & Subtractive & Multiplicative & Divisible
type Bool   :- Primitive
type Unit   :- #()
type List   :- Primitive & Monoid & Functor

do 'vim: syntax=ocaml
