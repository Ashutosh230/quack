-- TODO: these should become type classes for parametric polymorphism
-- TODO: booleans should be ADTs
-- TODO: tell prefix from postfix and infix operators on objects

type Id :- &a -> a

type Functor :- %{
    fmap: &a -> b
}

type Show :- %{
    to_string: &[] -> string
}

type Bool:- %{
    &(and): &[Bool, Bool] -> Bool,
    &(or): &[Bool, Bool] -> Bool,
    &(xor): &[Bool, Bool] -> Bool,
    &(not): &[Bool] -> Bool
}

type Eq :- %{
    &(=): &a -> boolean,
    &(<>): &a -> boolean,
    max: Id,
    min: Id
}

type Ord :- %{
    &(<): &a -> boolean,
    &(>): &a -> boolean,
    &(<=): &a -> boolean,
    &(>=): &a -> boolean
}

type Enum :- %{
    succ: &[] -> a,
    pred: &[] -> a
}

type Monoid :- %{
    empty: &[] -> a,
    concat: Id
}

type Additive :- %{
    &(+): Id
}

type Subtractive :- %{
    &(-): Id
}

type Multiplicative :- %{
    &(*): Id
}

type Divisible :- %{
    &(/): Id
}

type Primitive :- Show & Eq & Ord

type String :- Primitive & Monoid & Additive
type Number :- Primitive & Enum & Monoid & Additive & Subtractive & Multiplicative & Divisible
type Unit   :- #()
type List   :- Primitive & Monoid & Functor

do 'vim: syntax=ocaml

