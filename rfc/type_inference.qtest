%%command
php ./src/Quack.php %s
%%describe
Local type inference
%%source
let name :: string :- 'lorem ipsum dolor sit' + 'l'
let age :: number :- 10
let bool :: boolean :- true and false
let email :: regex :- &/.@./
let atom :: @GET :- @GET
let people :: {%{name: string, age: number}} :- { %{
  name: 'Celao',
  age: 20
}, %{
  name: 'Jaca',
  age: 99
} }
let add :: &[number, number] -> number :- &[a :: number, b :: number] -> a + b
do add(10, age)
let id :- &[x] -> x
let fact :: &[number] -> number :- &[n :: number] -> n = 0 then 1 else n * fact(n - 1)
fn f(n :: number) -> number :- when
  n = 0 -> 1,
  else n * f(n - 1)
end
let request :: atom :- @POST
%%expect
array(1) {
  [0]=>
  string(6) "number"
}
let name :: string :- 'lorem ipsum dolor sit' + 'l'
let age :: number :- 10
let bool :: boolean :- true and false
let email :: regex :- &/.@./
let atom :: @GET :- @GET
let people :: {%{name: string, age: number}} :- { %{
  name: 'Celao',
  age: 20
}, %{
  name: 'Jaca',
  age: 99
} }
let add :: &[number, number] -> number :- &[a :: number, b :: number] -> a + b
do add(10, age)
let id :- &[x] -> x
let fact :: &[number] -> number :- &[n :: number] -> n = 0 then 1 else n * fact(n - 1)
fn f(n :: number) -> number :- when
  n = 0 -> 1,
  else n * f(n - 1)
end
let request :: atom :- @POST