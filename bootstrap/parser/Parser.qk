<<<<<<< HEAD
(* vim: Syntax=Ruby *)
=======
(** vim: syntax=OCaml *)

>>>>>>> ec319ac8161f287195709df41fcc5ccbb541b412
module QuackCompiler.Parser

open .Exception
open QuackCompiler.Lexer.{ Tag; Token; Tokenizer }
open QuackCompiler.Parselets.{
  IPrefixParselet; IInfixParselet; BinaryOperatorParselet; NumberParselet;
  NameParselet; PostfixOperatorParselet; PrefixOperatorParselet;
  TernaryParselet; GroupParselet; FunctionParselet; IncludeParselet;
  ArrayParselet; NewParselet; MemberAccessParselet }

model Parser [
  | input;
    lookahead;
<<<<<<< HEAD
    scope_level      :- 0;
    prefix_parselets :- {};
    infix_parselets  :- {} |

  init[ @input ] [
    self:register_parselets!
    self:consume!
  ]

  my fn register[ tag; parselet ] :- &(::- parselet)[
      parselet <: IPrefixParselet
        then self:prefix_parselets{ tag }
        else parselet <: IInfixParselet
          then self:infix_parselets{ tag }
          else raise "Error"
  ]

  my fn postfix[ tag; precedence ] :- self:register[
    tag; #PostfixOperatorParselet with { precedence }
  ]

  my fn prefix[ tag; precedence ] :- self:register[
    tag; #PrefixOperatorParselet with { precedence }
  ]

  my fn infix_left[ tag; precedence ] :- self:register[
    tag; #BinaryOperatorParselet with { precedence; false }
  ]

  my fn infix_right[ tag; precedence ] :- self:register[
    tag; #BinaryOperatorParselet with { precedence; true }
  ]

  fn register_parselets! [
    let custom :- {
      Tag:T_INTEGER #NumberParset;
      Tag:T_DOUBLE  #NumberParselet;
      Tag:T_IDENT   #NameParset;
      Tag:T_THEN    #TernaryParselet;
    }

    custom |> array_walk[ fn { key | self:register[ key; custom{ key } ] } ]
  ]

  fn match[ tag ] [
    if self:lookahead:get_tag! = tag [ ^ self:consume!. ]
    raise #SyntaxError
      :expected [ tag            ]
      :found    [ self:lookahead ]
      :on       [ self:position! ]
      :source   [ self:input     ].
  ]

  fn opt[ tag ] [
    if self:lookahead:get_tag! = tag [
      let pointer :- self:consume! in ^ pointer = null then true else pointer
    ]
    ^ false.
  ]

  fn is[ tag ] :- self:lookahead:get_tag! = tag

  fn is_operator! [
    self:op ::- self:lookahead:get_tag!.
    let op_table:- array_values[ Tag:get_op_table! ].
    ^ in_array[ op; op_table; true ].
  ]

  fn consume! [
    let pointer :- self:lookahead?:get_pointer!.
    self:lookahead :- self:input:next_token!.
    ^ pointer
  ]

  fn consume_and_fetch! [
    let clone :- self:lookahead.
    self:lookahead ::- self:input:next_token!.
    ^ clone.
  ]

  fn resolve_scope[ pointer ] :- self:input:get_symbol_table!:get[ pointer ]

  fn position :- { "line" *self:input:line; "column" *self:input:column }

  fn infix_parselet_for_token[ token ] [
    let key :- token:get_tag!.
    ^ array_key_exists[ key; self:prefix_parselets ] then self.infix_parselets[ key ]
                                                     else nil.
  ]

  fn prefix_parselet_for_token[ token ] [
    let key :- token:get_tag!.
    ^ array_key_exists[ key; self:prefix_parselets ] then self.prefix_parselets[ key ]
                                                     else nil.
  ]

  fn open_scope :- self:scope_level ::- self:scope_level + 1

  fn close_scope :- self:scope_level ::- self:scope_level - 1

  fn indent! :- str_repeat[ ' '; self:scope_level ]

  fn dedent! :- str_repeat[
    ' '; self:scope_level > 0 then self:scope_level - 1 else 0
=======
    scope_level      :- zero;
    prefix_parselets :- todo;
    infix_parselets  :- todo |

  fn initialize [*input] [
    // TODO
  ]

  my fn register [tag; parselet] [
    // TODO
  ]

  my fn postfix [tag; precedence] [
    // TODO
  ]

  my fn infix_left [tag; precedence] [
    // TODO
  ]

  my fn infix_right [tag; precedence] [
    // TODO
  ]

  my fn register_parselets! [
    // TODO
  ]

  fn _match [tag] [
    // TODO
  ]

  fn opt [tag] [
    // TODO
  ]

  fn is_operator! [
    // TODO
  ]

  fn consume! [
    // TODO
  ]

  fn consume_and_fetch! [
    // TODO
  ]

  fn resolve_scope [pointer] [
    // TODO
  ]

  fn position! [
    // TODO
  ]

  fn infix_parselet_for_token [token] [
    // TODO
  ]

  fn prefix_parselet_for_token [token] [
    // TODO
  ]

  fn open_scope! [
    // TODO
  ]

  fn close_scope! [
    // TODO
  ]

  fn indent! [
    // TODO
  ]

  fn dedent! [
    // TODO
>>>>>>> ec319ac8161f287195709df41fcc5ccbb541b412
  ]
]
