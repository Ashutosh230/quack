(** vim: syntax=OCaml *)

module QuackCompiler.Parser

open Exception
open QuackCompiler.Lexer.Tag
open QuackCompiler.Lexer.Token
open QuackCompiler.Lexer.Tokenizer
open QuackCompiler.Parselets.IPrefixParselet
open QuackCompiler.Parselets.IInfixParselet
open QuackCompiler.Parselets.BinaryOperatorParselet
open QuackCompiler.Parselets.NumberParselet
open QuackCompiler.Parselets.PostfixOperatorParselet
open QuackCompiler.Parselets.PrefixOperatorParselet
open QuackCompiler.Parselets.TernaryParselet
open QuackCompiler.Parselets.GroupParselet

model Parser [
  | input;
    lookahead;
    scope_level      :- zero;
    prefix_parselets :- todo;
    infix_parselets  :- todo |

  fn initialize [*input] [
    // TODO
  ]

  my fn register [tag; parselet] [
    // TODO
  ]

  my fn postfix [tag; precedence] [
    // TODO
  ]

  my fn infix_left [tag; precedence] [
    // TODO
  ]

  my fn infix_right [tag; precedence] [
    // TODO
  ]

  my fn register_parselets! [
    // TODO
  ]

  fn _match [tag] [
    // TODO
  ]

  fn opt [tag] [
    // TODO
  ]

  fn is_operator! [
    // TODO
  ]

  fn consume! [
    // TODO
  ]

  fn consume_and_fetch! [
    // TODO
  ]

  fn resolve_scope [pointer] [
    // TODO
  ]

  fn position! [
    // TODO
  ]

  fn infix_parselet_for_token [token] [
    // TODO
  ]

  fn prefix_parselet_for_token [token] [
    // TODO
  ]

  fn open_scope! [
    // TODO
  ]

  fn close_scope! [
    // TODO
  ]

  fn indent! [
    // TODO
  ]

  fn dedent! [
    // TODO
  ]
]
